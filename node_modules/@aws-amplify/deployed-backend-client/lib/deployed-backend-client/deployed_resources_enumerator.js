import { ListStackResourcesCommand, } from '@aws-sdk/client-cloudformation';
/**
 * Lists deployed resources
 */
export class DeployedResourcesEnumerator {
    stackStatusMapper;
    arnGenerator;
    arnParser;
    /**
     * Constructs a DeployedResourcesEnumerator
     */
    constructor(stackStatusMapper, arnGenerator, arnParser) {
        this.stackStatusMapper = stackStatusMapper;
        this.arnGenerator = arnGenerator;
        this.arnParser = arnParser;
    }
    /**
     * Lists all resources deployed in all nested cfn stacks
     */
    listDeployedResources = async (cfnClient, stackName, accountId, region) => {
        const deployedBackendResources = [];
        const stackResourceSummaries = [];
        let nextToken;
        do {
            const stackResources = await cfnClient.send(new ListStackResourcesCommand({
                StackName: stackName,
                NextToken: nextToken,
            }));
            nextToken = stackResources.NextToken;
            stackResourceSummaries.push(...(stackResources.StackResourceSummaries ?? []));
        } while (nextToken);
        const childStackArns = stackResourceSummaries
            .filter((stackResourceSummary) => {
            return (stackResourceSummary.ResourceType === 'AWS::CloudFormation::Stack');
        })
            .map((stackResourceSummary) => {
            return stackResourceSummary.PhysicalResourceId;
        }) ?? [];
        const promises = childStackArns.map((childStackArn) => {
            const childStackName = childStackArn?.split('/')?.[1];
            if (!childStackArn || !childStackName) {
                return [];
            }
            const parsedArn = this.arnParser.tryParseArn(childStackArn);
            // Recursive call to get all the resources from child stacks
            return this.listDeployedResources(cfnClient, childStackName, parsedArn.accountId, parsedArn.region);
        });
        const deployedResourcesPerChildStack = await Promise.all(promises);
        deployedBackendResources.push(...deployedResourcesPerChildStack.flat());
        const parentStackNonStackResources = stackResourceSummaries.filter((stackResourceSummary) => {
            return (stackResourceSummary.ResourceType !== 'AWS::CloudFormation::Stack');
        }) ?? [];
        const parentDeployedNonStackResources = parentStackNonStackResources.map((stackResourceSummary) => ({
            logicalResourceId: stackResourceSummary.LogicalResourceId,
            lastUpdated: stackResourceSummary.LastUpdatedTimestamp,
            resourceStatus: this.stackStatusMapper.translateStackStatus(stackResourceSummary.ResourceStatus),
            resourceStatusReason: stackResourceSummary.ResourceStatusReason,
            resourceType: stackResourceSummary.ResourceType,
            physicalResourceId: stackResourceSummary.PhysicalResourceId,
            arn: this.arnGenerator.generateArn(stackResourceSummary, region, accountId),
        }));
        deployedBackendResources.push(...parentDeployedNonStackResources);
        return deployedBackendResources;
    };
}
//# sourceMappingURL=data:application/json;base64,