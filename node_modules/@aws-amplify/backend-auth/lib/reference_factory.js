import { authAccessBuilder as _authAccessBuilder } from './access_builder.js';
import path from 'path';
import { AmplifyUserError, TagName } from '@aws-amplify/platform-core';
import { AuthAccessPolicyArbiterFactory } from './auth_access_policy_arbiter.js';
import { Stack, Tags } from 'aws-cdk-lib';
import { UserPoolAccessPolicyFactory } from './userpool_access_policy_factory.js';
import { AmplifyAuthFactory } from './factory.js';
import { AmplifyReferenceAuth } from './reference_construct.js';
/**
 * Singleton factory for AmplifyReferenceAuth that can be used in Amplify project files.
 *
 * Exported for testing purpose only & should NOT be exported out of the package.
 */
export class AmplifyReferenceAuthFactory {
    props;
    importStack;
    provides = 'AuthResources';
    generator;
    /**
     * Set the properties that will be used to initialize AmplifyReferenceAuth
     */
    constructor(props, 
    // eslint-disable-next-line amplify-backend-rules/prefer-amplify-errors
    importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
        if (AmplifyAuthFactory.factoryCount > 0) {
            throw new AmplifyUserError('MultipleSingletonResourcesError', {
                message: 'Multiple `defineAuth` or `referenceAuth` calls are not allowed within an Amplify backend',
                resolution: 'Remove all but one `defineAuth` or `referenceAuth` call',
            });
        }
        AmplifyAuthFactory.factoryCount++;
    }
    /**
     * Get a singleton instance of AmplifyReferenceAuth
     */
    getInstance = (getInstanceProps) => {
        const { constructContainer, importPathVerifier } = getInstanceProps;
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'auth', 'resource'), 'Amplify Auth must be defined in amplify/auth/resource.ts');
        if (!this.generator) {
            this.generator = new AmplifyReferenceAuthGenerator(this.props, getInstanceProps);
        }
        return constructContainer.getOrCompute(this.generator);
    };
}
class AmplifyReferenceAuthGenerator {
    props;
    getInstanceProps;
    authAccessBuilder;
    authAccessPolicyArbiterFactory;
    resourceGroupName = 'auth';
    name;
    constructor(props, getInstanceProps, authAccessBuilder = _authAccessBuilder, authAccessPolicyArbiterFactory = new AuthAccessPolicyArbiterFactory()) {
        this.props = props;
        this.getInstanceProps = getInstanceProps;
        this.authAccessBuilder = authAccessBuilder;
        this.authAccessPolicyArbiterFactory = authAccessPolicyArbiterFactory;
        this.name = 'amplifyAuth';
    }
    generateContainerEntry = ({ scope, ssmEnvironmentEntriesGenerator, }) => {
        const authProps = {
            ...this.props,
            outputStorageStrategy: this.getInstanceProps.outputStorageStrategy,
        };
        let authConstruct;
        try {
            authConstruct = new AmplifyReferenceAuth(scope, this.name, authProps);
        }
        catch (error) {
            throw new AmplifyUserError('AmplifyReferenceAuthConstructInitializationError', {
                message: 'Failed to instantiate reference auth construct',
                resolution: 'See the underlying error message for more details.',
            }, error);
        }
        Tags.of(authConstruct).add(TagName.FRIENDLY_NAME, this.name);
        const authConstructMixin = {
            ...authConstruct,
            /**
             * Returns a resourceAccessAcceptor for the given role
             * @param roleIdentifier Either the auth or unauth role name or the name of a UserPool group
             */
            getResourceAccessAcceptor: (roleIdentifier) => ({
                identifier: `${roleIdentifier}ResourceAccessAcceptor`,
                acceptResourceAccess: (policy) => {
                    const role = roleNameIsAuthRoleName(roleIdentifier)
                        ? authConstruct.resources[roleIdentifier]
                        : authConstruct.resources.groups?.[roleIdentifier]?.role;
                    if (!role) {
                        throw new AmplifyUserError('InvalidResourceAccessConfigError', {
                            message: `No auth IAM role found for "${roleIdentifier}".`,
                            resolution: `If you are trying to configure UserPool group access, ensure that the group name is specified correctly.`,
                        });
                    }
                    policy.attachToRole(role);
                },
            }),
            stack: Stack.of(authConstruct),
        };
        if (!this.props.access) {
            return authConstructMixin;
        }
        // props.access is the access callback defined by the customer
        // here we inject the authAccessBuilder into the callback and run it
        // this produces the access definition that will be used to create the auth access policies
        const accessDefinition = this.props.access(this.authAccessBuilder);
        const ssmEnvironmentEntries = ssmEnvironmentEntriesGenerator.generateSsmEnvironmentEntries({
            [`${this.name}_USERPOOL_ID`]: authConstructMixin.resources.userPool.userPoolId,
        });
        const authPolicyArbiter = this.authAccessPolicyArbiterFactory.getInstance(accessDefinition, this.getInstanceProps, ssmEnvironmentEntries, new UserPoolAccessPolicyFactory(authConstruct.resources.userPool));
        authPolicyArbiter.arbitratePolicies();
        return authConstructMixin;
    };
}
const roleNameIsAuthRoleName = (roleName) => {
    return (roleName === 'authenticatedUserIamRole' ||
        roleName === 'unauthenticatedUserIamRole');
};
/**
 * Provide references to existing auth resources.
 */
export const referenceAuth = (props) => {
    return new AmplifyReferenceAuthFactory(props, 
    // eslint-disable-next-line amplify-backend-rules/prefer-amplify-errors
    new Error().stack);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVmZXJlbmNlX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZUEsT0FBTyxFQUFFLGlCQUFpQixJQUFJLGtCQUFrQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUUsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNqRixPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUxQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNsRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFzRGhFOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sMkJBQTJCO0lBV25CO0lBRUE7SUFWVixRQUFRLEdBQUcsZUFBZSxDQUFDO0lBRTVCLFNBQVMsQ0FBbUM7SUFFcEQ7O09BRUc7SUFDSCxZQUNtQixLQUFnQztJQUNqRCx1RUFBdUU7SUFDdEQsY0FBYyxJQUFJLEtBQUssRUFBRSxDQUFDLEtBQUs7UUFGL0IsVUFBSyxHQUFMLEtBQUssQ0FBMkI7UUFFaEMsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBRWhELElBQUksa0JBQWtCLENBQUMsWUFBWSxHQUFHLENBQUMsRUFBRTtZQUN2QyxNQUFNLElBQUksZ0JBQWdCLENBQUMsaUNBQWlDLEVBQUU7Z0JBQzVELE9BQU8sRUFDTCwwRkFBMEY7Z0JBQzVGLFVBQVUsRUFBRSx5REFBeUQ7YUFDdEUsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FB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QUs7SUFDTCx1RUFBdUU7SUFDdkUsSUFBSSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQ2xCLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBbXBsaWZ5UmVzb3VyY2VHcm91cE5hbWUsXG4gIEF1dGhSb2xlTmFtZSxcbiAgQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneSxcbiAgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3IsXG4gIENvbnN0cnVjdEZhY3RvcnksXG4gIENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICBHZW5lcmF0ZUNvbnRhaW5lckVudHJ5UHJvcHMsXG4gIFJlZmVyZW5jZUF1dGhSZXNvdXJjZXMsXG4gIFJlc291cmNlQWNjZXNzQWNjZXB0b3IsXG4gIFJlc291cmNlQWNjZXNzQWNjZXB0b3JGYWN0b3J5LFxuICBSZXNvdXJjZVByb3ZpZGVyLFxuICBTdGFja1Byb3ZpZGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IEF1dGhBY2Nlc3NHZW5lcmF0b3IsIEV4cGFuZCB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHsgYXV0aEFjY2Vzc0J1aWxkZXIgYXMgX2F1dGhBY2Nlc3NCdWlsZGVyIH0gZnJvbSAnLi9hY2Nlc3NfYnVpbGRlci5qcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IEFtcGxpZnlVc2VyRXJyb3IsIFRhZ05hbWUgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBBdXRoQWNjZXNzUG9saWN5QXJiaXRlckZhY3RvcnkgfSBmcm9tICcuL2F1dGhfYWNjZXNzX3BvbGljeV9hcmJpdGVyLmpzJztcbmltcG9ydCB7IFN0YWNrLCBUYWdzIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgUG9saWN5IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBVc2VyUG9vbEFjY2Vzc1BvbGljeUZhY3RvcnkgfSBmcm9tICcuL3VzZXJwb29sX2FjY2Vzc19wb2xpY3lfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBBbXBsaWZ5QXV0aEZhY3RvcnkgfSBmcm9tICcuL2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgQW1wbGlmeVJlZmVyZW5jZUF1dGggfSBmcm9tICcuL3JlZmVyZW5jZV9jb25zdHJ1Y3QuanMnO1xuaW1wb3J0IHsgQXV0aE91dHB1dCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zY2hlbWFzJztcblxuZXhwb3J0IHR5cGUgUmVmZXJlbmNlQXV0aFByb3BzID0ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3k/OiBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5PEF1dGhPdXRwdXQ+O1xuICAvKipcbiAgICogRXhpc3RpbmcgVXNlclBvb2wgSWRcbiAgICovXG4gIHVzZXJQb29sSWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIEV4aXN0aW5nIElkZW50aXR5UG9vbCBJZFxuICAgKi9cbiAgaWRlbnRpdHlQb29sSWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIEV4aXN0aW5nIFVzZXJQb29sQ2xpZW50IElkXG4gICAqL1xuICB1c2VyUG9vbENsaWVudElkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBFeGlzdGluZyBBdXRoUm9sZSBBUk5cbiAgICovXG4gIGF1dGhSb2xlQXJuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBFeGlzdGluZyBVbmF1dGhSb2xlIEFSTlxuICAgKi9cbiAgdW5hdXRoUm9sZUFybjogc3RyaW5nO1xuICAvKipcbiAgICogQSBtYXBwaW5nIG9mIGV4aXN0aW5nIGdyb3VwIG5hbWVzIGFuZCB0aGVpciBhc3NvY2lhdGVkIHJvbGUgQVJOc1xuICAgKiB3aGljaCBjYW4gYmUgdXNlZCBmb3IgZ3JvdXAgcGVybWlzc2lvbnMuXG4gICAqL1xuICBncm91cHM/OiB7XG4gICAgW2dyb3VwTmFtZTogc3RyaW5nXTogc3RyaW5nO1xuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgQmFja2VuZFJlZmVyZW5jZUF1dGggPSBSZXNvdXJjZVByb3ZpZGVyPFJlZmVyZW5jZUF1dGhSZXNvdXJjZXM+ICZcbiAgUmVzb3VyY2VBY2Nlc3NBY2NlcHRvckZhY3Rvcnk8QXV0aFJvbGVOYW1lIHwgc3RyaW5nPiAmXG4gIFN0YWNrUHJvdmlkZXI7XG5cbmV4cG9ydCB0eXBlIEFtcGxpZnlSZWZlcmVuY2VBdXRoUHJvcHMgPSBFeHBhbmQ8XG4gIE9taXQ8UmVmZXJlbmNlQXV0aFByb3BzLCAnb3V0cHV0U3RvcmFnZVN0cmF0ZWd5Jz4gJiB7XG4gICAgLyoqXG4gICAgICogQ29uZmlndXJlIGFjY2VzcyB0byBhdXRoIGZvciBvdGhlciBBbXBsaWZ5IHJlc291cmNlc1xuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmFtcGxpZnkuYXdzL3JlYWN0L2J1aWxkLWEtYmFja2VuZC9hdXRoL2dyYW50LWFjY2Vzcy10by1hdXRoLXJlc291cmNlcy9cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGFjY2VzczogKGFsbG93KSA9PiBbYWxsb3cucmVzb3VyY2UocG9zdENvbmZpcm1hdGlvbikudG8oW1wiYWRkVXNlclRvR3JvdXBcIl0pXVxuICAgICAqIEBleGFtcGxlXG4gICAgICogYWNjZXNzOiAoYWxsb3cpID0+IFthbGxvdy5yZXNvdXJjZShncm91cE1hbmFnZXIpLnRvKFtcIm1hbmFnZUdyb3Vwc1wiXSldXG4gICAgICovXG4gICAgYWNjZXNzPzogQXV0aEFjY2Vzc0dlbmVyYXRvcjtcbiAgfVxuPjtcbi8qKlxuICogU2luZ2xldG9uIGZhY3RvcnkgZm9yIEFtcGxpZnlSZWZlcmVuY2VBdXRoIHRoYXQgY2FuIGJlIHVzZWQgaW4gQW1wbGlmeSBwcm9qZWN0IGZpbGVzLlxuICpcbiAqIEV4cG9ydGVkIGZvciB0ZXN0aW5nIHB1cnBvc2Ugb25seSAmIHNob3VsZCBOT1QgYmUgZXhwb3J0ZWQgb3V0IG9mIHRoZSBwYWNrYWdlLlxuICovXG5leHBvcnQgY2xhc3MgQW1wbGlmeVJlZmVyZW5jZUF1dGhGYWN0b3J5XG4gIGltcGxlbWVudHMgQ29uc3RydWN0RmFjdG9yeTxCYWNrZW5kUmVmZXJlbmNlQXV0aD5cbntcbiAgcmVhZG9ubHkgcHJvdmlkZXMgPSAnQXV0aFJlc291cmNlcyc7XG5cbiAgcHJpdmF0ZSBnZW5lcmF0b3I6IENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZSBBbXBsaWZ5UmVmZXJlbmNlQXV0aFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogQW1wbGlmeVJlZmVyZW5jZUF1dGhQcm9wcyxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYW1wbGlmeS1iYWNrZW5kLXJ1bGVzL3ByZWZlci1hbXBsaWZ5LWVycm9yc1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaW1wb3J0U3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjayxcbiAgKSB7XG4gICAgaWYgKEFtcGxpZnlBdXRoRmFjdG9yeS5mYWN0b3J5Q291bnQgPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcignTXVsdGlwbGVTaW5nbGV0b25SZXNvdXJjZXNFcnJvcicsIHtcbiAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAnTXVsdGlwbGUgYGRlZmluZUF1dGhgIG9yIGByZWZlcmVuY2VBdXRoYCBjYWxscyBhcmUgbm90IGFsbG93ZWQgd2l0aGluIGFuIEFtcGxpZnkgYmFja2VuZCcsXG4gICAgICAgIHJlc29sdXRpb246ICdSZW1vdmUgYWxsIGJ1dCBvbmUgYGRlZmluZUF1dGhgIG9yIGByZWZlcmVuY2VBdXRoYCBjYWxsJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBBbXBsaWZ5QXV0aEZhY3RvcnkuZmFjdG9yeUNvdW50Kys7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBBbXBsaWZ5UmVmZXJlbmNlQXV0aFxuICAgKi9cbiAgZ2V0SW5zdGFuY2UgPSAoXG4gICAgZ2V0SW5zdGFuY2VQcm9wczogQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHMsXG4gICk6IEJhY2tlbmRSZWZlcmVuY2VBdXRoID0+IHtcbiAgICBjb25zdCB7IGNvbnN0cnVjdENvbnRhaW5lciwgaW1wb3J0UGF0aFZlcmlmaWVyIH0gPSBnZXRJbnN0YW5jZVByb3BzO1xuICAgIGltcG9ydFBhdGhWZXJpZmllcj8udmVyaWZ5KFxuICAgICAgdGhpcy5pbXBvcnRTdGFjayxcbiAgICAgIHBhdGguam9pbignYW1wbGlmeScsICdhdXRoJywgJ3Jlc291cmNlJyksXG4gICAgICAnQW1wbGlmeSBBdXRoIG11c3QgYmUgZGVmaW5lZCBpbiBhbXBsaWZ5L2F1dGgvcmVzb3VyY2UudHMnLFxuICAgICk7XG4gICAgaWYgKCF0aGlzLmdlbmVyYXRvcikge1xuICAgICAgdGhpcy5nZW5lcmF0b3IgPSBuZXcgQW1wbGlmeVJlZmVyZW5jZUF1dGhHZW5lcmF0b3IoXG4gICAgICAgIHRoaXMucHJvcHMsXG4gICAgICAgIGdldEluc3RhbmNlUHJvcHMsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY29uc3RydWN0Q29udGFpbmVyLmdldE9yQ29tcHV0ZShcbiAgICAgIHRoaXMuZ2VuZXJhdG9yLFxuICAgICkgYXMgQmFja2VuZFJlZmVyZW5jZUF1dGg7XG4gIH07XG59XG5jbGFzcyBBbXBsaWZ5UmVmZXJlbmNlQXV0aEdlbmVyYXRvclxuICBpbXBsZW1lbnRzIENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yXG57XG4gIHJlYWRvbmx5IHJlc291cmNlR3JvdXBOYW1lOiBBbXBsaWZ5UmVzb3VyY2VHcm91cE5hbWUgPSAnYXV0aCc7XG4gIHByaXZhdGUgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEFtcGxpZnlSZWZlcmVuY2VBdXRoUHJvcHMsXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZXRJbnN0YW5jZVByb3BzOiBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wcyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGF1dGhBY2Nlc3NCdWlsZGVyID0gX2F1dGhBY2Nlc3NCdWlsZGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXV0aEFjY2Vzc1BvbGljeUFyYml0ZXJGYWN0b3J5ID0gbmV3IEF1dGhBY2Nlc3NQb2xpY3lBcmJpdGVyRmFjdG9yeSgpLFxuICApIHtcbiAgICB0aGlzLm5hbWUgPSAnYW1wbGlmeUF1dGgnO1xuICB9XG5cbiAgZ2VuZXJhdGVDb250YWluZXJFbnRyeSA9ICh7XG4gICAgc2NvcGUsXG4gICAgc3NtRW52aXJvbm1lbnRFbnRyaWVzR2VuZXJhdG9yLFxuICB9OiBHZW5lcmF0ZUNvbnRhaW5lckVudHJ5UHJvcHMpID0+IHtcbiAgICBjb25zdCBhdXRoUHJvcHM6IFJlZmVyZW5jZUF1dGhQcm9wcyA9IHtcbiAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3k6IHRoaXMuZ2V0SW5zdGFuY2VQcm9wcy5vdXRwdXRTdG9yYWdlU3RyYXRlZ3ksXG4gICAgfTtcblxuICAgIGxldCBhdXRoQ29uc3RydWN0OiBBbXBsaWZ5UmVmZXJlbmNlQXV0aDtcbiAgICB0cnkge1xuICAgICAgYXV0aENvbnN0cnVjdCA9IG5ldyBBbXBsaWZ5UmVmZXJlbmNlQXV0aChzY29wZSwgdGhpcy5uYW1lLCBhdXRoUHJvcHMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgJ0FtcGxpZnlSZWZlcmVuY2VBdXRoQ29uc3RydWN0SW5pdGlhbGl6YXRpb25FcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGluc3RhbnRpYXRlIHJlZmVyZW5jZSBhdXRoIGNvbnN0cnVjdCcsXG4gICAgICAgICAgcmVzb2x1dGlvbjogJ1NlZSB0aGUgdW5kZXJseWluZyBlcnJvciBtZXNzYWdlIGZvciBtb3JlIGRldGFpbHMuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IgYXMgRXJyb3IsXG4gICAgICApO1xuICAgIH1cblxuICAgIFRhZ3Mub2YoYXV0aENvbnN0cnVjdCkuYWRkKFRhZ05hbWUuRlJJRU5ETFlfTkFNRSwgdGhpcy5uYW1lKTtcblxuICAgIGNvbnN0IGF1dGhDb25zdHJ1Y3RNaXhpbjogQmFja2VuZFJlZmVyZW5jZUF1dGggPSB7XG4gICAgICAuLi5hdXRoQ29uc3RydWN0LFxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGEgcmVzb3VyY2VBY2Nlc3NBY2NlcHRvciBmb3IgdGhlIGdpdmVuIHJvbGVcbiAgICAgICAqIEBwYXJhbSByb2xlSWRlbnRpZmllciBFaXRoZXIgdGhlIGF1dGggb3IgdW5hdXRoIHJvbGUgbmFtZSBvciB0aGUgbmFtZSBvZiBhIFVzZXJQb29sIGdyb3VwXG4gICAgICAgKi9cbiAgICAgIGdldFJlc291cmNlQWNjZXNzQWNjZXB0b3I6IChcbiAgICAgICAgcm9sZUlkZW50aWZpZXI6IEF1dGhSb2xlTmFtZSB8IHN0cmluZyxcbiAgICAgICk6IFJlc291cmNlQWNjZXNzQWNjZXB0b3IgPT4gKHtcbiAgICAgICAgaWRlbnRpZmllcjogYCR7cm9sZUlkZW50aWZpZXJ9UmVzb3VyY2VBY2Nlc3NBY2NlcHRvcmAsXG4gICAgICAgIGFjY2VwdFJlc291cmNlQWNjZXNzOiAocG9saWN5OiBQb2xpY3kpID0+IHtcbiAgICAgICAgICBjb25zdCByb2xlID0gcm9sZU5hbWVJc0F1dGhSb2xlTmFtZShyb2xlSWRlbnRpZmllcilcbiAgICAgICAgICAgID8gYXV0aENvbnN0cnVjdC5yZXNvdXJjZXNbcm9sZUlkZW50aWZpZXJdXG4gICAgICAgICAgICA6IGF1dGhDb25zdHJ1Y3QucmVzb3VyY2VzLmdyb3Vwcz8uW3JvbGVJZGVudGlmaWVyXT8ucm9sZTtcbiAgICAgICAgICBpZiAoIXJvbGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKCdJbnZhbGlkUmVzb3VyY2VBY2Nlc3NDb25maWdFcnJvcicsIHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogYE5vIGF1dGggSUFNIHJvbGUgZm91bmQgZm9yIFwiJHtyb2xlSWRlbnRpZmllcn1cIi5gLFxuICAgICAgICAgICAgICByZXNvbHV0aW9uOiBgSWYgeW91IGFyZSB0cnlpbmcgdG8gY29uZmlndXJlIFVzZXJQb29sIGdyb3VwIGFjY2VzcywgZW5zdXJlIHRoYXQgdGhlIGdyb3VwIG5hbWUgaXMgc3BlY2lmaWVkIGNvcnJlY3RseS5gLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvbGljeS5hdHRhY2hUb1JvbGUocm9sZSk7XG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICAgIHN0YWNrOiBTdGFjay5vZihhdXRoQ29uc3RydWN0KSxcbiAgICB9O1xuICAgIGlmICghdGhpcy5wcm9wcy5hY2Nlc3MpIHtcbiAgICAgIHJldHVybiBhdXRoQ29uc3RydWN0TWl4aW47XG4gICAgfVxuICAgIC8vIHByb3BzLmFjY2VzcyBpcyB0aGUgYWNjZXNzIGNhbGxiYWNrIGRlZmluZWQgYnkgdGhlIGN1c3RvbWVyXG4gICAgLy8gaGVyZSB3ZSBpbmplY3QgdGhlIGF1dGhBY2Nlc3NCdWlsZGVyIGludG8gdGhlIGNhbGxiYWNrIGFuZCBydW4gaXRcbiAgICAvLyB0aGlzIHByb2R1Y2VzIHRoZSBhY2Nlc3MgZGVmaW5pdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgdGhlIGF1dGggYWNjZXNzIHBvbGljaWVzXG4gICAgY29uc3QgYWNjZXNzRGVmaW5pdGlvbiA9IHRoaXMucHJvcHMuYWNjZXNzKHRoaXMuYXV0aEFjY2Vzc0J1aWxkZXIpO1xuXG4gICAgY29uc3Qgc3NtRW52aXJvbm1lbnRFbnRyaWVzID1cbiAgICAgIHNzbUVudmlyb25tZW50RW50cmllc0dlbmVyYXRvci5nZW5lcmF0ZVNzbUVudmlyb25tZW50RW50cmllcyh7XG4gICAgICAgIFtgJHt0aGlzLm5hbWV9X1VTRVJQT09MX0lEYF06XG4gICAgICAgICAgYXV0aENvbnN0cnVjdE1peGluLnJlc291cmNlcy51c2VyUG9vbC51c2VyUG9vbElkLFxuICAgICAgfSk7XG5cbiAgICBjb25zdCBhdXRoUG9saWN5QXJiaXRlciA9IHRoaXMuYXV0aEFjY2Vzc1BvbGljeUFyYml0ZXJGYWN0b3J5LmdldEluc3RhbmNlKFxuICAgICAgYWNjZXNzRGVmaW5pdGlvbixcbiAgICAgIHRoaXMuZ2V0SW5zdGFuY2VQcm9wcyxcbiAgICAgIHNzbUVudmlyb25tZW50RW50cmllcyxcbiAgICAgIG5ldyBVc2VyUG9vbEFjY2Vzc1BvbGljeUZhY3RvcnkoYXV0aENvbnN0cnVjdC5yZXNvdXJjZXMudXNlclBvb2wpLFxuICAgICk7XG5cbiAgICBhdXRoUG9saWN5QXJiaXRlci5hcmJpdHJhdGVQb2xpY2llcygpO1xuXG4gICAgcmV0dXJuIGF1dGhDb25zdHJ1Y3RNaXhpbjtcbiAgfTtcbn1cblxuY29uc3Qgcm9sZU5hbWVJc0F1dGhSb2xlTmFtZSA9IChyb2xlTmFtZTogc3RyaW5nKTogcm9sZU5hbWUgaXMgQXV0aFJvbGVOYW1lID0+IHtcbiAgcmV0dXJuIChcbiAgICByb2xlTmFtZSA9PT0gJ2F1dGhlbnRpY2F0ZWRVc2VySWFtUm9sZScgfHxcbiAgICByb2xlTmFtZSA9PT0gJ3VuYXV0aGVudGljYXRlZFVzZXJJYW1Sb2xlJ1xuICApO1xufTtcblxuLyoqXG4gKiBQcm92aWRlIHJlZmVyZW5jZXMgdG8gZXhpc3RpbmcgYXV0aCByZXNvdXJjZXMuXG4gKi9cbmV4cG9ydCBjb25zdCByZWZlcmVuY2VBdXRoID0gKFxuICBwcm9wczogQW1wbGlmeVJlZmVyZW5jZUF1dGhQcm9wcyxcbik6IENvbnN0cnVjdEZhY3Rvcnk8QmFja2VuZFJlZmVyZW5jZUF1dGg+ID0+IHtcbiAgcmV0dXJuIG5ldyBBbXBsaWZ5UmVmZXJlbmNlQXV0aEZhY3RvcnkoXG4gICAgcHJvcHMsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFtcGxpZnktYmFja2VuZC1ydWxlcy9wcmVmZXItYW1wbGlmeS1lcnJvcnNcbiAgICBuZXcgRXJyb3IoKS5zdGFjayxcbiAgKTtcbn07XG4iXX0=