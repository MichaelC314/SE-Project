/**
 * Reads SSM environment context from a known Amplify environment variable,
 * fetches values from SSM and places those values in the corresponding environment variables
 */
export const internalAmplifyFunctionResolveSsmParams = async (client) => {
    const envPathObject = JSON.parse(process.env.AMPLIFY_SSM_ENV_CONFIG ?? '{}');
    const paths = Object.keys(envPathObject);
    if (paths.length === 0) {
        return;
    }
    let actualSsmClient;
    if (client) {
        actualSsmClient = client;
    }
    else {
        const ssmSdk = await import('@aws-sdk/client-ssm');
        actualSsmClient = new ssmSdk.SSM();
    }
    const chunkArray = (array, chunkSize) => {
        const chunks = [];
        for (let i = 0; i < array.length; i += chunkSize) {
            chunks.push(array.slice(i, i + chunkSize));
        }
        return chunks;
    };
    const resolveSecrets = async (paths) => {
        const response = (await Promise.all(chunkArray(paths, 10).map(async (chunkedPaths) => await actualSsmClient.getParameters({
            Names: chunkedPaths,
            WithDecryption: true,
        })))).reduce((accumulator, res) => {
            accumulator.Parameters?.push(...(res.Parameters ?? []));
            accumulator.InvalidParameters?.push(...(res.InvalidParameters ?? []));
            return accumulator;
        }, {
            Parameters: [],
            InvalidParameters: [],
        });
        if (response.Parameters && response.Parameters.length > 0) {
            for (const parameter of response.Parameters) {
                if (parameter.Name) {
                    const envKey = Object.keys(envPathObject).find((key) => envPathObject[key].sharedPath === parameter.Name);
                    const envName = envKey
                        ? envPathObject[envKey].name
                        : envPathObject[parameter.Name]?.name;
                    process.env[envName] = parameter.Value;
                }
            }
        }
        return response;
    };
    const response = await resolveSecrets(paths);
    const sharedPaths = (response?.InvalidParameters || [])
        .map((invalidParam) => envPathObject[invalidParam].sharedPath)
        .filter((sharedParam) => !!sharedParam); // this assertion is safe because we are filtering out undefined
    if (sharedPaths.length > 0) {
        await resolveSecrets(sharedPaths);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZV9zc21fcGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xhbWJkYS1zaGltcy9yZXNvbHZlX3NzbV9wYXJhbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0E7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUNBQXVDLEdBQUcsS0FBSyxFQUFFLE1BQVksRUFBRSxFQUFFO0lBQzVFLE1BQU0sYUFBYSxHQUFlLElBQUksQ0FBQyxLQUFLLENBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLElBQUksSUFBSSxDQUMzQyxDQUFDO0lBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUV6QyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLE9BQU87S0FDUjtJQUVELElBQUksZUFBb0IsQ0FBQztJQUN6QixJQUFJLE1BQU0sRUFBRTtRQUNWLGVBQWUsR0FBRyxNQUFNLENBQUM7S0FDMUI7U0FBTTtRQUNMLE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDbkQsZUFBZSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBSSxLQUFVLEVBQUUsU0FBaUIsRUFBUyxFQUFFO1FBQzdELE1BQU0sTUFBTSxHQUFVLEVBQUUsQ0FBQztRQUN6QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksU0FBUyxFQUFFO1lBQ2hELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDLENBQUM7SUFFRixNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQUUsS0FBZSxFQUFFLEVBQUU7UUFDL0MsTUFBTSxRQUFRLEdBQUcsQ0FDZixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQ3ZCLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUNyQixNQUFNLGVBQWUsQ0FBQyxhQUFhLENBQUM7WUFDbEMsS0FBSyxFQUFFLFlBQVk7WUFDbkIsY0FBYyxFQUFFLElBQUk7U0FDckIsQ0FBQyxDQUNMLENBQ0YsQ0FDRixDQUFDLE1BQU0sQ0FDTixDQUFDLFdBQVcsRUFBRSxHQUErQixFQUFFLEVBQUU7WUFDL0MsV0FBVyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN4RCxXQUFXLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN0RSxPQUFPLFdBQVcsQ0FBQztRQUNyQixDQUFDLEVBQ0Q7WUFDRSxVQUFVLEVBQUUsRUFBRTtZQUNkLGlCQUFpQixFQUFFLEVBQUU7U0FDaUIsQ0FDekMsQ0FBQztRQUVGLElBQUksUUFBUSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekQsS0FBSyxNQUFNLFNBQVMsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFO2dCQUMzQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUU7b0JBQ2xCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUM1QyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsSUFBSSxDQUMxRCxDQUFDO29CQUNGLE1BQU0sT0FBTyxHQUFHLE1BQU07d0JBQ3BCLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSTt3QkFDNUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDO29CQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7aUJBQ3hDO2FBQ0Y7U0FDRjtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUMsQ0FBQztJQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTdDLE1BQU0sV0FBVyxHQUFHLENBQUMsUUFBUSxFQUFFLGlCQUFpQixJQUFJLEVBQUUsQ0FBQztTQUNwRCxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLENBQUM7U0FDN0QsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFhLENBQUMsQ0FBQyxnRUFBZ0U7SUFFdkgsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMxQixNQUFNLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNuQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBjb2RlIGxvYWRzIGVudmlyb25tZW50IHZhbHVlcyBmcm9tIFNTTSBhbmQgcGxhY2VzIHRoZW0gaW4gdGhlaXIgY29ycmVzcG9uZGluZyBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKiBJZiB0aGVyZSBhcmUgbm8gU1NNIGVudmlyb25tZW50IHZhbHVlcyBmb3IgdGhpcyBmdW5jdGlvbiwgdGhpcyBpcyBhIG5vb3AuXG4gKi9cbmltcG9ydCB0eXBlIHsgR2V0UGFyYW1ldGVyc0NvbW1hbmRPdXRwdXQsIFNTTSB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zc20nO1xuaW1wb3J0IHR5cGUgeyBTc21FbnZWYXJzIH0gZnJvbSAnLi4vZnVuY3Rpb25fZW52X3RyYW5zbGF0b3IuanMnO1xuXG4vKipcbiAqIFJlYWRzIFNTTSBlbnZpcm9ubWVudCBjb250ZXh0IGZyb20gYSBrbm93biBBbXBsaWZ5IGVudmlyb25tZW50IHZhcmlhYmxlLFxuICogZmV0Y2hlcyB2YWx1ZXMgZnJvbSBTU00gYW5kIHBsYWNlcyB0aG9zZSB2YWx1ZXMgaW4gdGhlIGNvcnJlc3BvbmRpbmcgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gKi9cbmV4cG9ydCBjb25zdCBpbnRlcm5hbEFtcGxpZnlGdW5jdGlvblJlc29sdmVTc21QYXJhbXMgPSBhc3luYyAoY2xpZW50PzogU1NNKSA9PiB7XG4gIGNvbnN0IGVudlBhdGhPYmplY3Q6IFNzbUVudlZhcnMgPSBKU09OLnBhcnNlKFxuICAgIHByb2Nlc3MuZW52LkFNUExJRllfU1NNX0VOVl9DT05GSUcgPz8gJ3t9JyxcbiAgKTtcbiAgY29uc3QgcGF0aHMgPSBPYmplY3Qua2V5cyhlbnZQYXRoT2JqZWN0KTtcblxuICBpZiAocGF0aHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGFjdHVhbFNzbUNsaWVudDogU1NNO1xuICBpZiAoY2xpZW50KSB7XG4gICAgYWN0dWFsU3NtQ2xpZW50ID0gY2xpZW50O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNzbVNkayA9IGF3YWl0IGltcG9ydCgnQGF3cy1zZGsvY2xpZW50LXNzbScpO1xuICAgIGFjdHVhbFNzbUNsaWVudCA9IG5ldyBzc21TZGsuU1NNKCk7XG4gIH1cblxuICBjb25zdCBjaHVua0FycmF5ID0gPFQ+KGFycmF5OiBUW10sIGNodW5rU2l6ZTogbnVtYmVyKTogVFtdW10gPT4ge1xuICAgIGNvbnN0IGNodW5rczogVFtdW10gPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSArPSBjaHVua1NpemUpIHtcbiAgICAgIGNodW5rcy5wdXNoKGFycmF5LnNsaWNlKGksIGkgKyBjaHVua1NpemUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNodW5rcztcbiAgfTtcblxuICBjb25zdCByZXNvbHZlU2VjcmV0cyA9IGFzeW5jIChwYXRoczogc3RyaW5nW10pID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IChcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBjaHVua0FycmF5KHBhdGhzLCAxMCkubWFwKFxuICAgICAgICAgIGFzeW5jIChjaHVua2VkUGF0aHMpID0+XG4gICAgICAgICAgICBhd2FpdCBhY3R1YWxTc21DbGllbnQuZ2V0UGFyYW1ldGVycyh7XG4gICAgICAgICAgICAgIE5hbWVzOiBjaHVua2VkUGF0aHMsXG4gICAgICAgICAgICAgIFdpdGhEZWNyeXB0aW9uOiB0cnVlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICksXG4gICAgICApXG4gICAgKS5yZWR1Y2UoXG4gICAgICAoYWNjdW11bGF0b3IsIHJlczogR2V0UGFyYW1ldGVyc0NvbW1hbmRPdXRwdXQpID0+IHtcbiAgICAgICAgYWNjdW11bGF0b3IuUGFyYW1ldGVycz8ucHVzaCguLi4ocmVzLlBhcmFtZXRlcnMgPz8gW10pKTtcbiAgICAgICAgYWNjdW11bGF0b3IuSW52YWxpZFBhcmFtZXRlcnM/LnB1c2goLi4uKHJlcy5JbnZhbGlkUGFyYW1ldGVycyA/PyBbXSkpO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBQYXJhbWV0ZXJzOiBbXSxcbiAgICAgICAgSW52YWxpZFBhcmFtZXRlcnM6IFtdLFxuICAgICAgfSBhcyBQYXJ0aWFsPEdldFBhcmFtZXRlcnNDb21tYW5kT3V0cHV0PixcbiAgICApO1xuXG4gICAgaWYgKHJlc3BvbnNlLlBhcmFtZXRlcnMgJiYgcmVzcG9uc2UuUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGNvbnN0IHBhcmFtZXRlciBvZiByZXNwb25zZS5QYXJhbWV0ZXJzKSB7XG4gICAgICAgIGlmIChwYXJhbWV0ZXIuTmFtZSkge1xuICAgICAgICAgIGNvbnN0IGVudktleSA9IE9iamVjdC5rZXlzKGVudlBhdGhPYmplY3QpLmZpbmQoXG4gICAgICAgICAgICAoa2V5KSA9PiBlbnZQYXRoT2JqZWN0W2tleV0uc2hhcmVkUGF0aCA9PT0gcGFyYW1ldGVyLk5hbWUsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBlbnZOYW1lID0gZW52S2V5XG4gICAgICAgICAgICA/IGVudlBhdGhPYmplY3RbZW52S2V5XS5uYW1lXG4gICAgICAgICAgICA6IGVudlBhdGhPYmplY3RbcGFyYW1ldGVyLk5hbWVdPy5uYW1lO1xuICAgICAgICAgIHByb2Nlc3MuZW52W2Vudk5hbWVdID0gcGFyYW1ldGVyLlZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9O1xuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzb2x2ZVNlY3JldHMocGF0aHMpO1xuXG4gIGNvbnN0IHNoYXJlZFBhdGhzID0gKHJlc3BvbnNlPy5JbnZhbGlkUGFyYW1ldGVycyB8fCBbXSlcbiAgICAubWFwKChpbnZhbGlkUGFyYW0pID0+IGVudlBhdGhPYmplY3RbaW52YWxpZFBhcmFtXS5zaGFyZWRQYXRoKVxuICAgIC5maWx0ZXIoKHNoYXJlZFBhcmFtKSA9PiAhIXNoYXJlZFBhcmFtKSBhcyBzdHJpbmdbXTsgLy8gdGhpcyBhc3NlcnRpb24gaXMgc2FmZSBiZWNhdXNlIHdlIGFyZSBmaWx0ZXJpbmcgb3V0IHVuZGVmaW5lZFxuXG4gIGlmIChzaGFyZWRQYXRocy5sZW5ndGggPiAwKSB7XG4gICAgYXdhaXQgcmVzb2x2ZVNlY3JldHMoc2hhcmVkUGF0aHMpO1xuICB9XG59O1xuIl19