// This is a terrible, horrible, no good, very bad hack to invoke the SSM parameter resolution code into the lambda function
// If we need to put anything else here, and I mean ANYTHING, then we need a different strategy
// we can't type check this file because we can't import the internalAmplifyFunctionResolveSsmParams symbol without creating a duplicate symbol in the bundled lambda code
// eslint-disable-next-line @typescript-eslint/ban-ts-comment, spellcheck/spell-checker
// @ts-nocheck
await internalAmplifyFunctionResolveSsmParams();
const SSM_PARAMETER_REFRESH_MS = 1000 * 60;
setInterval(
// eslint-disable-next-line @typescript-eslint/no-misused-promises
async () => {
    try {
        await internalAmplifyFunctionResolveSsmParams();
    }
    catch (error) {
        try {
            // Attempt to log error
            console.debug(error);
            // eslint-disable-next-line amplify-backend-rules/no-empty-catch
        }
        catch {
            // Do nothing if logging fails
        }
    }
}, SSM_PARAMETER_REFRESH_MS);
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52b2tlX3NzbV9zaGltLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xhbWJkYS1zaGltcy9pbnZva2Vfc3NtX3NoaW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNEhBQTRIO0FBQzVILCtGQUErRjtBQUUvRiwwS0FBMEs7QUFDMUssdUZBQXVGO0FBQ3ZGLGNBQWM7QUFDZCxNQUFNLHVDQUF1QyxFQUFFLENBQUM7QUFFaEQsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBRTNDLFdBQVc7QUFDVCxrRUFBa0U7QUFDbEUsS0FBSyxJQUFJLEVBQUU7SUFDVCxJQUFJO1FBQ0YsTUFBTSx1Q0FBdUMsRUFBRSxDQUFDO0tBQ2pEO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxJQUFJO1lBQ0YsdUJBQXVCO1lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckIsZ0VBQWdFO1NBQ2pFO1FBQUMsTUFBTTtZQUNOLDhCQUE4QjtTQUMvQjtLQUNGO0FBQ0gsQ0FBQyxFQUNELHdCQUF3QixDQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBpcyBhIHRlcnJpYmxlLCBob3JyaWJsZSwgbm8gZ29vZCwgdmVyeSBiYWQgaGFjayB0byBpbnZva2UgdGhlIFNTTSBwYXJhbWV0ZXIgcmVzb2x1dGlvbiBjb2RlIGludG8gdGhlIGxhbWJkYSBmdW5jdGlvblxuLy8gSWYgd2UgbmVlZCB0byBwdXQgYW55dGhpbmcgZWxzZSBoZXJlLCBhbmQgSSBtZWFuIEFOWVRISU5HLCB0aGVuIHdlIG5lZWQgYSBkaWZmZXJlbnQgc3RyYXRlZ3lcblxuLy8gd2UgY2FuJ3QgdHlwZSBjaGVjayB0aGlzIGZpbGUgYmVjYXVzZSB3ZSBjYW4ndCBpbXBvcnQgdGhlIGludGVybmFsQW1wbGlmeUZ1bmN0aW9uUmVzb2x2ZVNzbVBhcmFtcyBzeW1ib2wgd2l0aG91dCBjcmVhdGluZyBhIGR1cGxpY2F0ZSBzeW1ib2wgaW4gdGhlIGJ1bmRsZWQgbGFtYmRhIGNvZGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnQsIHNwZWxsY2hlY2svc3BlbGwtY2hlY2tlclxuLy8gQHRzLW5vY2hlY2tcbmF3YWl0IGludGVybmFsQW1wbGlmeUZ1bmN0aW9uUmVzb2x2ZVNzbVBhcmFtcygpO1xuXG5jb25zdCBTU01fUEFSQU1FVEVSX1JFRlJFU0hfTVMgPSAxMDAwICogNjA7XG5cbnNldEludGVydmFsKFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW1pc3VzZWQtcHJvbWlzZXNcbiAgYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBpbnRlcm5hbEFtcGxpZnlGdW5jdGlvblJlc29sdmVTc21QYXJhbXMoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBsb2cgZXJyb3JcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhlcnJvcik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhbXBsaWZ5LWJhY2tlbmQtcnVsZXMvbm8tZW1wdHktY2F0Y2hcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGxvZ2dpbmcgZmFpbHNcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIFNTTV9QQVJBTUVURVJfUkVGUkVTSF9NUyxcbik7XG4iXX0=