import { Tags } from 'aws-cdk-lib';
import { AmplifyUserError, TagName } from '@aws-amplify/platform-core';
import { AmplifyFunctionBase } from './function_construct_base.js';
import { FunctionResourceAccessAcceptor } from './resource_access_acceptor.js';
/**
 * Adapts provided CDK function as Amplify function.
 */
export class ProvidedFunctionFactory {
    functionProvider;
    props;
    generator;
    /**
     * Creates provided function factory.
     */
    constructor(functionProvider, props) {
        this.functionProvider = functionProvider;
        this.props = props;
    }
    /**
     * Creates a function instance.
     */
    getInstance(props) {
        if (!this.generator) {
            this.generator = new ProvidedFunctionGenerator(this.functionProvider, props.outputStorageStrategy, this.props);
        }
        return props.constructContainer.getOrCompute(this.generator);
    }
}
class ProvidedFunctionGenerator {
    functionProvider;
    outputStorageStrategy;
    resourceGroupName;
    constructor(functionProvider, outputStorageStrategy, props) {
        this.functionProvider = functionProvider;
        this.outputStorageStrategy = outputStorageStrategy;
        this.resourceGroupName = props?.resourceGroupName ?? 'function';
    }
    generateContainerEntry = ({ scope }) => {
        let providedFunction;
        try {
            providedFunction = this.functionProvider(scope);
        }
        catch (e) {
            if (e instanceof Error &&
                (e.message.includes('docker exited with status 1') ||
                    e.message.includes('docker ENOENT'))) {
                throw new AmplifyUserError('CustomFunctionProviderDockerError', {
                    message: 'Failed to instantiate custom function provider',
                    resolution: 'See https://docs.amplify.aws/react/build-a-backend/functions/custom-functions for more details about current limitations and troubleshooting steps.',
                }, e);
            }
            else {
                throw new AmplifyUserError('CustomFunctionProviderError', {
                    message: 'Failed to instantiate custom function provider',
                    resolution: 'Check the definition of your custom function provided in `defineFunction` and refer to the logs for more information. See https://docs.amplify.aws/react/build-a-backend/functions/custom-functions for more details.',
                }, e instanceof Error ? e : undefined);
            }
        }
        return new ProvidedAmplifyFunction(scope, `${providedFunction.node.id}-provided`, this.outputStorageStrategy, providedFunction);
    };
}
class ProvidedAmplifyFunction extends AmplifyFunctionBase {
    resources;
    constructor(scope, id, outputStorageStrategy, providedFunction) {
        super(scope, id, outputStorageStrategy);
        const cfnFunction = providedFunction.node.findChild('Resource');
        Tags.of(cfnFunction).add(TagName.FRIENDLY_NAME, providedFunction.node.id);
        this.resources = {
            lambda: providedFunction,
            cfnResources: {
                cfnFunction,
            },
        };
        this.storeOutput();
    }
    getResourceAccessAcceptor = () => new FunctionResourceAccessAcceptor(this);
}
//# sourceMappingURL=data:application/json;base64,