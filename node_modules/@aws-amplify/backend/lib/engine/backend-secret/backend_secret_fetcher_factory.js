import { CustomResource, Lazy } from 'aws-cdk-lib';
/**
 * Resource provider ID for the backend secret resource.
 */
export const SECRET_RESOURCE_PROVIDER_ID = 'AmplifySecretFetcherResourceProvider';
class SecretFetcherCustomResource extends CustomResource {
    secrets;
    constructor(scope, id, props, secrets) {
        super(scope, id, {
            ...props,
        });
        this.secrets = secrets;
    }
    addSecret = (secretName) => {
        this.secrets.add(secretName);
    };
}
/**
 * Type of the backend custom CFN resource.
 */
const SECRET_RESOURCE_TYPE = `Custom::AmplifySecretFetcherResource`;
/**
 * The factory to create backend secret-fetcher resource.
 */
export class BackendSecretFetcherFactory {
    secretProviderFactory;
    /**
     * Creates a backend secret-fetcher resource factory.
     */
    constructor(secretProviderFactory) {
        this.secretProviderFactory = secretProviderFactory;
    }
    /**
     * Returns a resource if it exists in the input scope. Otherwise,
     * creates a new one.
     */
    getOrCreate = (scope, secretName, backendIdentifier) => {
        const secretResourceId = `AmplifySecretFetcherResource`;
        const existingResource = scope.node.tryFindChild(secretResourceId);
        if (existingResource) {
            existingResource.addSecret(secretName);
            return existingResource;
        }
        const secrets = new Set();
        secrets.add(secretName);
        const provider = this.secretProviderFactory.getOrCreateInstance(scope, SECRET_RESOURCE_PROVIDER_ID, backendIdentifier);
        // Sandbox deployment passes down the secret's last updated timestamp to
        // trigger secret update. It is to optimize sandbox deployment time by
        // leveraging cdk hotswap.
        const secretLastUpdated = scope.node.tryGetContext('secretLastUpdated') ?? Date.now();
        const customResourceProps = {
            namespace: backendIdentifier.namespace,
            name: backendIdentifier.name,
            type: backendIdentifier.type,
            secretNames: Lazy.list({
                produce: () => {
                    return Array.from(secrets);
                },
            }),
        };
        return new SecretFetcherCustomResource(scope, secretResourceId, {
            serviceToken: provider.serviceToken,
            properties: {
                ...customResourceProps,
                secretLastUpdated, // this property is only to trigger resource update event.
            },
            resourceType: SECRET_RESOURCE_TYPE,
        }, secrets);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VuZ2luZS9iYWNrZW5kLXNlY3JldC9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGNBQWMsRUFBdUIsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBSXhFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQ3RDLHNDQUFzQyxDQUFDO0FBRXpDLE1BQU0sMkJBQTRCLFNBQVEsY0FBYztJQUM5QyxPQUFPLENBQWM7SUFDN0IsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsS0FBMEIsRUFDMUIsT0FBb0I7UUFFcEIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixHQUFHLEtBQUs7U0FDVCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRU0sU0FBUyxHQUFHLENBQUMsVUFBa0IsRUFBRSxFQUFFO1FBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQztDQUNIO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLG9CQUFvQixHQUFHLHNDQUFzQyxDQUFDO0FBRXBFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUEyQjtJQUtuQjtJQUpuQjs7T0FFRztJQUNILFlBQ21CLHFCQUEwRDtRQUExRCwwQkFBcUIsR0FBckIscUJBQXFCLENBQXFDO0lBQzFFLENBQUM7SUFFSjs7O09BR0c7SUFDSCxXQUFXLEdBQUcsQ0FDWixLQUFnQixFQUNoQixVQUFrQixFQUNsQixpQkFBb0MsRUFDUCxFQUFFO1FBQy9CLE1BQU0sZ0JBQWdCLEdBQUcsOEJBQThCLENBQUM7UUFDeEQsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FDOUMsZ0JBQWdCLENBQ2MsQ0FBQztRQUVqQyxJQUFJLGdCQUFnQixFQUFFO1lBQ3BCLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN2QyxPQUFPLGdCQUFnQixDQUFDO1NBQ3pCO1FBQ0QsTUFBTSxPQUFPLEdBQWdCLElBQUksR0FBRyxFQUFFLENBQUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV4QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLENBQzdELEtBQUssRUFDTCwyQkFBMkIsRUFDM0IsaUJBQWlCLENBQ2xCLENBQUM7UUFFRix3RUFBd0U7UUFDeEUsc0VBQXNFO1FBQ3RFLDBCQUEwQjtRQUMxQixNQUFNLGlCQUFpQixHQUNyQixLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUU5RCxNQUFNLG1CQUFtQixHQUF3QjtZQUMvQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsU0FBUztZQUN0QyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtZQUM1QixJQUFJLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtZQUM1QixXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDckIsT0FBTyxFQUFFLEdBQUcsRUFBRTtvQkFDWixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzdCLENBQUM7YUFDRixDQUFDO1NBQ0gsQ0FBQztRQUVGLE9BQU8sSUFBSSwyQkFBMkIsQ0FDcEMsS0FBSyxFQUNMLGdCQUFnQixFQUNoQjtZQUNFLFlBQVksRUFBRSxRQUFRLENBQUMsWUFBWTtZQUNuQyxVQUFVLEVBQUU7Z0JBQ1YsR0FBRyxtQkFBbUI7Z0JBQ3RCLGlCQUFpQixFQUFFLDBEQUEwRDthQUM5RTtZQUNELFlBQVksRUFBRSxvQkFBb0I7U0FDbkMsRUFDRCxPQUFPLENBQ1IsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBCYWNrZW5kU2VjcmV0RmV0Y2hlclByb3ZpZGVyRmFjdG9yeSB9IGZyb20gJy4vYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl9wcm92aWRlcl9mYWN0b3J5LmpzJztcbmltcG9ydCB7IEN1c3RvbVJlc291cmNlLCBDdXN0b21SZXNvdXJjZVByb3BzLCBMYXp5IH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IFNlY3JldFJlc291cmNlUHJvcHMgfSBmcm9tICcuL2xhbWJkYS9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX3R5cGVzLmpzJztcblxuLyoqXG4gKiBSZXNvdXJjZSBwcm92aWRlciBJRCBmb3IgdGhlIGJhY2tlbmQgc2VjcmV0IHJlc291cmNlLlxuICovXG5leHBvcnQgY29uc3QgU0VDUkVUX1JFU09VUkNFX1BST1ZJREVSX0lEID1cbiAgJ0FtcGxpZnlTZWNyZXRGZXRjaGVyUmVzb3VyY2VQcm92aWRlcic7XG5cbmNsYXNzIFNlY3JldEZldGNoZXJDdXN0b21SZXNvdXJjZSBleHRlbmRzIEN1c3RvbVJlc291cmNlIHtcbiAgcHJpdmF0ZSBzZWNyZXRzOiBTZXQ8c3RyaW5nPjtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIHByb3BzOiBDdXN0b21SZXNvdXJjZVByb3BzLFxuICAgIHNlY3JldHM6IFNldDxzdHJpbmc+LFxuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIC4uLnByb3BzLFxuICAgIH0pO1xuICAgIHRoaXMuc2VjcmV0cyA9IHNlY3JldHM7XG4gIH1cblxuICBwdWJsaWMgYWRkU2VjcmV0ID0gKHNlY3JldE5hbWU6IHN0cmluZykgPT4ge1xuICAgIHRoaXMuc2VjcmV0cy5hZGQoc2VjcmV0TmFtZSk7XG4gIH07XG59XG5cbi8qKlxuICogVHlwZSBvZiB0aGUgYmFja2VuZCBjdXN0b20gQ0ZOIHJlc291cmNlLlxuICovXG5jb25zdCBTRUNSRVRfUkVTT1VSQ0VfVFlQRSA9IGBDdXN0b206OkFtcGxpZnlTZWNyZXRGZXRjaGVyUmVzb3VyY2VgO1xuXG4vKipcbiAqIFRoZSBmYWN0b3J5IHRvIGNyZWF0ZSBiYWNrZW5kIHNlY3JldC1mZXRjaGVyIHJlc291cmNlLlxuICovXG5leHBvcnQgY2xhc3MgQmFja2VuZFNlY3JldEZldGNoZXJGYWN0b3J5IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBiYWNrZW5kIHNlY3JldC1mZXRjaGVyIHJlc291cmNlIGZhY3RvcnkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlY3JldFByb3ZpZGVyRmFjdG9yeTogQmFja2VuZFNlY3JldEZldGNoZXJQcm92aWRlckZhY3RvcnksXG4gICkge31cblxuICAvKipcbiAgICogUmV0dXJucyBhIHJlc291cmNlIGlmIGl0IGV4aXN0cyBpbiB0aGUgaW5wdXQgc2NvcGUuIE90aGVyd2lzZSxcbiAgICogY3JlYXRlcyBhIG5ldyBvbmUuXG4gICAqL1xuICBnZXRPckNyZWF0ZSA9IChcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIHNlY3JldE5hbWU6IHN0cmluZyxcbiAgICBiYWNrZW5kSWRlbnRpZmllcjogQmFja2VuZElkZW50aWZpZXIsXG4gICk6IFNlY3JldEZldGNoZXJDdXN0b21SZXNvdXJjZSA9PiB7XG4gICAgY29uc3Qgc2VjcmV0UmVzb3VyY2VJZCA9IGBBbXBsaWZ5U2VjcmV0RmV0Y2hlclJlc291cmNlYDtcbiAgICBjb25zdCBleGlzdGluZ1Jlc291cmNlID0gc2NvcGUubm9kZS50cnlGaW5kQ2hpbGQoXG4gICAgICBzZWNyZXRSZXNvdXJjZUlkLFxuICAgICkgYXMgU2VjcmV0RmV0Y2hlckN1c3RvbVJlc291cmNlO1xuXG4gICAgaWYgKGV4aXN0aW5nUmVzb3VyY2UpIHtcbiAgICAgIGV4aXN0aW5nUmVzb3VyY2UuYWRkU2VjcmV0KHNlY3JldE5hbWUpO1xuICAgICAgcmV0dXJuIGV4aXN0aW5nUmVzb3VyY2U7XG4gICAgfVxuICAgIGNvbnN0IHNlY3JldHM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuICAgIHNlY3JldHMuYWRkKHNlY3JldE5hbWUpO1xuXG4gICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLnNlY3JldFByb3ZpZGVyRmFjdG9yeS5nZXRPckNyZWF0ZUluc3RhbmNlKFxuICAgICAgc2NvcGUsXG4gICAgICBTRUNSRVRfUkVTT1VSQ0VfUFJPVklERVJfSUQsXG4gICAgICBiYWNrZW5kSWRlbnRpZmllcixcbiAgICApO1xuXG4gICAgLy8gU2FuZGJveCBkZXBsb3ltZW50IHBhc3NlcyBkb3duIHRoZSBzZWNyZXQncyBsYXN0IHVwZGF0ZWQgdGltZXN0YW1wIHRvXG4gICAgLy8gdHJpZ2dlciBzZWNyZXQgdXBkYXRlLiBJdCBpcyB0byBvcHRpbWl6ZSBzYW5kYm94IGRlcGxveW1lbnQgdGltZSBieVxuICAgIC8vIGxldmVyYWdpbmcgY2RrIGhvdHN3YXAuXG4gICAgY29uc3Qgc2VjcmV0TGFzdFVwZGF0ZWQgPVxuICAgICAgc2NvcGUubm9kZS50cnlHZXRDb250ZXh0KCdzZWNyZXRMYXN0VXBkYXRlZCcpID8/IERhdGUubm93KCk7XG5cbiAgICBjb25zdCBjdXN0b21SZXNvdXJjZVByb3BzOiBTZWNyZXRSZXNvdXJjZVByb3BzID0ge1xuICAgICAgbmFtZXNwYWNlOiBiYWNrZW5kSWRlbnRpZmllci5uYW1lc3BhY2UsXG4gICAgICBuYW1lOiBiYWNrZW5kSWRlbnRpZmllci5uYW1lLFxuICAgICAgdHlwZTogYmFja2VuZElkZW50aWZpZXIudHlwZSxcbiAgICAgIHNlY3JldE5hbWVzOiBMYXp5Lmxpc3Qoe1xuICAgICAgICBwcm9kdWNlOiAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oc2VjcmV0cyk7XG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBTZWNyZXRGZXRjaGVyQ3VzdG9tUmVzb3VyY2UoXG4gICAgICBzY29wZSxcbiAgICAgIHNlY3JldFJlc291cmNlSWQsXG4gICAgICB7XG4gICAgICAgIHNlcnZpY2VUb2tlbjogcHJvdmlkZXIuc2VydmljZVRva2VuLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgLi4uY3VzdG9tUmVzb3VyY2VQcm9wcyxcbiAgICAgICAgICBzZWNyZXRMYXN0VXBkYXRlZCwgLy8gdGhpcyBwcm9wZXJ0eSBpcyBvbmx5IHRvIHRyaWdnZXIgcmVzb3VyY2UgdXBkYXRlIGV2ZW50LlxuICAgICAgICB9LFxuICAgICAgICByZXNvdXJjZVR5cGU6IFNFQ1JFVF9SRVNPVVJDRV9UWVBFLFxuICAgICAgfSxcbiAgICAgIHNlY3JldHMsXG4gICAgKTtcbiAgfTtcbn1cbiJdfQ==