/**
 * Converts client config to a different shapes needed by mobile libraries for Gen1 format.
 */
export class ClientConfigMobileConverter {
    packageName;
    packageVersion;
    /**
     * Creates client config converter
     */
    constructor(packageName, packageVersion) {
        this.packageName = packageName;
        this.packageVersion = packageVersion;
    }
    /**
     * Converts client config to a shape consumable by mobile libraries.
     */
    convertToMobileConfig = (clientConfig) => {
        const userAgent = `${this.packageName}/${this.packageVersion}`;
        const mobileConfig = {
            UserAgent: userAgent,
            Version: '1.0',
        };
        if (clientConfig.aws_user_pools_id) {
            const authConfig = {
                plugins: {
                    awsCognitoAuthPlugin: {
                        UserAgent: userAgent,
                        Version: '1.0',
                        CognitoUserPool: {
                            Default: {
                                PoolId: clientConfig.aws_user_pools_id,
                                AppClientId: clientConfig.aws_user_pools_web_client_id,
                                Region: clientConfig.aws_cognito_region,
                            },
                        },
                        CredentialsProvider: {
                            CognitoIdentity: {
                                Default: {
                                    PoolId: clientConfig.aws_cognito_identity_pool_id,
                                    Region: clientConfig.aws_cognito_region,
                                },
                            },
                        },
                        Auth: {
                            Default: {
                                authenticationFlowType: 'USER_SRP_AUTH',
                                mfaConfiguration: clientConfig.aws_cognito_mfa_configuration,
                                mfaTypes: clientConfig.aws_cognito_mfa_types,
                                passwordProtectionSettings: {
                                    passwordPolicyMinLength: clientConfig.aws_cognito_password_protection_settings
                                        ?.passwordPolicyMinLength,
                                    passwordPolicyCharacters: clientConfig.aws_cognito_password_protection_settings
                                        ?.passwordPolicyCharacters ?? [],
                                },
                                signupAttributes: clientConfig.aws_cognito_signup_attributes ?? [],
                                usernameAttributes: clientConfig.aws_cognito_username_attributes ?? [],
                                verificationMechanisms: clientConfig.aws_cognito_verification_mechanisms ?? [],
                                socialProviders: clientConfig.aws_cognito_social_providers ?? [],
                            },
                        },
                    },
                },
            };
            if (clientConfig.oauth) {
                authConfig.plugins.awsCognitoAuthPlugin.Auth.Default.OAuth = {
                    WebDomain: clientConfig.oauth.domain,
                    Scopes: clientConfig.oauth.scope,
                    SignInRedirectURI: clientConfig.oauth.redirectSignIn,
                    SignOutRedirectURI: clientConfig.oauth.redirectSignOut,
                    AppClientId: clientConfig.oauth.clientId ||
                        clientConfig.aws_user_pools_web_client_id,
                };
            }
            mobileConfig.auth = authConfig;
        }
        if (clientConfig.aws_appsync_graphqlEndpoint) {
            const apiConfig = {
                plugins: {
                    awsAPIPlugin: {
                        data: {
                            endpointType: 'GraphQL',
                            endpoint: clientConfig.aws_appsync_graphqlEndpoint,
                            region: clientConfig.aws_appsync_region,
                            authorizationType: clientConfig.aws_appsync_authenticationType,
                            apiKey: clientConfig.aws_appsync_apiKey,
                        },
                    },
                },
            };
            mobileConfig.api = apiConfig;
            if (mobileConfig.auth) {
                let defaultClientDatabasePrefix = undefined;
                if (clientConfig.aws_appsync_authenticationType) {
                    defaultClientDatabasePrefix = `data_${clientConfig.aws_appsync_authenticationType}`;
                }
                mobileConfig.auth.plugins.awsCognitoAuthPlugin.AppSync = {
                    Default: {
                        ApiUrl: clientConfig.aws_appsync_graphqlEndpoint,
                        Region: clientConfig.aws_appsync_region,
                        AuthMode: clientConfig.aws_appsync_authenticationType,
                        ApiKey: clientConfig.aws_appsync_apiKey,
                        ClientDatabasePrefix: defaultClientDatabasePrefix,
                    },
                };
                if (clientConfig.aws_appsync_additionalAuthenticationTypes) {
                    for (const additionalAuthenticationType of clientConfig.aws_appsync_additionalAuthenticationTypes.split(',')) {
                        mobileConfig.auth.plugins.awsCognitoAuthPlugin.AppSync[`data_${additionalAuthenticationType}`] = {
                            ApiUrl: clientConfig.aws_appsync_graphqlEndpoint,
                            Region: clientConfig.aws_appsync_region,
                            AuthMode: additionalAuthenticationType,
                            ApiKey: clientConfig.aws_appsync_apiKey,
                            ClientDatabasePrefix: `data_${additionalAuthenticationType}`,
                        };
                    }
                }
            }
        }
        if (clientConfig.geo) {
            const geoConfig = {
                plugins: {
                    awsLocationGeoPlugin: {
                        region: clientConfig.geo.amazon_location_service.region,
                    },
                },
            };
            const maps = clientConfig.geo.amazon_location_service.maps;
            if (maps) {
                geoConfig.plugins.awsLocationGeoPlugin.maps = maps;
            }
            const searchIndices = clientConfig.geo.amazon_location_service.search_indices;
            if (searchIndices) {
                geoConfig.plugins.awsLocationGeoPlugin.searchIndices = searchIndices;
            }
            mobileConfig.geo = geoConfig;
        }
        if (clientConfig.Analytics) {
            mobileConfig.analytics = {
                plugins: {
                    awsPinpointAnalyticsPlugin: {
                        pinpointAnalytics: {
                            region: clientConfig.Analytics.Pinpoint.region,
                            appId: clientConfig.Analytics.Pinpoint.appId,
                        },
                        pinpointTargeting: {
                            region: clientConfig.Analytics.Pinpoint.region,
                        },
                    },
                },
            };
        }
        if (clientConfig.Notifications) {
            mobileConfig.notifications = {
                plugins: {},
            };
            if (clientConfig.Notifications.SMS) {
                mobileConfig.notifications.plugins.awsPinpointSmsNotificationsPlugin =
                    clientConfig.Notifications.SMS.AWSPinpoint;
            }
            if (clientConfig.Notifications.EMAIL) {
                mobileConfig.notifications.plugins.awsPinpointEmailNotificationsPlugin =
                    clientConfig.Notifications.EMAIL.AWSPinpoint;
            }
            if (clientConfig.Notifications.InAppMessaging) {
                mobileConfig.notifications.plugins.awsPinpointInAppMessagingNotificationsPlugin =
                    clientConfig.Notifications.InAppMessaging.AWSPinpoint;
            }
            if (clientConfig.Notifications.Push) {
                mobileConfig.notifications.plugins.awsPinpointPushNotificationsPlugin =
                    clientConfig.Notifications.Push.AWSPinpoint;
            }
        }
        if (clientConfig.aws_user_files_s3_bucket) {
            mobileConfig.storage = {
                plugins: {
                    awsS3StoragePlugin: {
                        bucket: clientConfig.aws_user_files_s3_bucket,
                        region: clientConfig.aws_user_files_s3_bucket_region,
                    },
                },
            };
        }
        return mobileConfig;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ190b19tb2JpbGVfbGVnYWN5X2NvbnZlcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQtY29uZmlnLXdyaXRlci9jbGllbnRfY29uZmlnX3RvX21vYmlsZV9sZWdhY3lfY29udmVydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUEyQjtJQUtuQjtJQUNBO0lBTG5COztPQUVHO0lBQ0gsWUFDbUIsV0FBbUIsRUFDbkIsY0FBc0I7UUFEdEIsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsbUJBQWMsR0FBZCxjQUFjLENBQVE7SUFDdEMsQ0FBQztJQUNKOztPQUVHO0lBQ0gscUJBQXFCLEdBQUcsQ0FDdEIsWUFBZ0MsRUFDWixFQUFFO1FBQ3RCLE1BQU0sU0FBUyxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFL0QsTUFBTSxZQUFZLEdBQXVCO1lBQ3ZDLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLE9BQU8sRUFBRSxLQUFLO1NBQ2YsQ0FBQztRQUNGLElBQUksWUFBWSxDQUFDLGlCQUFpQixFQUFFO1lBQ2xDLE1BQU0sVUFBVSxHQUEyQjtnQkFDekMsT0FBTyxFQUFFO29CQUNQLG9CQUFvQixFQUFFO3dCQUNwQixTQUFTLEVBQUUsU0FBUzt3QkFDcEIsT0FBTyxFQUFFLEtBQUs7d0JBQ2QsZUFBZSxFQUFFOzRCQUNmLE9BQU8sRUFBRTtnQ0FDUCxNQUFNLEVBQUUsWUFBWSxDQUFDLGlCQUFpQjtnQ0FDdEMsV0FBVyxFQUFFLFlBQVksQ0FBQyw0QkFBNEI7Z0NBQ3RELE1BQU0sRUFBRSxZQUFZLENBQUMsa0JBQWtCOzZCQUN4Qzt5QkFDRjt3QkFDRCxtQkFBbUIsRUFBRTs0QkFDbkIsZUFBZSxFQUFFO2dDQUNmLE9BQU8sRUFBRTtvQ0FDUCxNQUFNLEVBQUUsWUFBWSxDQUFDLDRCQUE0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QixPQUFPLEVBQUU7b0JBQ1Asa0JBQWtCLEVBQUU7d0JBQ2xCLE1BQU0sRUFBRSxZQUFZLENBQUMsd0JBQXdCO3dCQUM3QyxNQUFNLEVBQUUsWUFBWSxDQUFDLCtCQUErQjtxQkFDckQ7aUJBQ0Y7YUFDRixDQUFDO1NBQ0g7UUFFRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudENvbmZpZ0xlZ2FjeSB9IGZyb20gJy4uL2NsaWVudC1jb25maWctdHlwZXMvY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQge1xuICBDbGllbnRDb25maWdNb2JpbGUsXG4gIENsaWVudENvbmZpZ01vYmlsZUFwaSxcbiAgQ2xpZW50Q29uZmlnTW9iaWxlQXV0aCxcbiAgQ2xpZW50Q29uZmlnTW9iaWxlR2VvLFxufSBmcm9tICcuLi9jbGllbnQtY29uZmlnLXR5cGVzL21vYmlsZS9jbGllbnRfY29uZmlnX21vYmlsZV90eXBlcy5qcyc7XG5cbi8qKlxuICogQ29udmVydHMgY2xpZW50IGNvbmZpZyB0byBhIGRpZmZlcmVudCBzaGFwZXMgbmVlZGVkIGJ5IG1vYmlsZSBsaWJyYXJpZXMgZm9yIEdlbjEgZm9ybWF0LlxuICovXG5leHBvcnQgY2xhc3MgQ2xpZW50Q29uZmlnTW9iaWxlQ29udmVydGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgY2xpZW50IGNvbmZpZyBjb252ZXJ0ZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFja2FnZU5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhY2thZ2VWZXJzaW9uOiBzdHJpbmcsXG4gICkge31cbiAgLyoqXG4gICAqIENvbnZlcnRzIGNsaWVudCBjb25maWcgdG8gYSBzaGFwZSBjb25zdW1hYmxlIGJ5IG1vYmlsZSBsaWJyYXJpZXMuXG4gICAqL1xuICBjb252ZXJ0VG9Nb2JpbGVDb25maWcgPSAoXG4gICAgY2xpZW50Q29uZmlnOiBDbGllbnRDb25maWdMZWdhY3ksXG4gICk6IENsaWVudENvbmZpZ01vYmlsZSA9PiB7XG4gICAgY29uc3QgdXNlckFnZW50ID0gYCR7dGhpcy5wYWNrYWdlTmFtZX0vJHt0aGlzLnBhY2thZ2VWZXJzaW9ufWA7XG5cbiAgICBjb25zdCBtb2JpbGVDb25maWc6IENsaWVudENvbmZpZ01vYmlsZSA9IHtcbiAgICAgIFVzZXJBZ2VudDogdXNlckFnZW50LFxuICAgICAgVmVyc2lvbjogJzEuMCcsXG4gICAgfTtcbiAgICBpZiAoY2xpZW50Q29uZmlnLmF3c191c2VyX3Bvb2xzX2lkKSB7XG4gICAgICBjb25zdCBhdXRoQ29uZmlnOiBDbGllbnRDb25maWdNb2JpbGVBdXRoID0ge1xuICAgICAgICBwbHVnaW5zOiB7XG4gICAgICAgICAgYXdzQ29nbml0b0F1dGhQbHVnaW46IHtcbiAgICAgICAgICAgIFVzZXJBZ2VudDogdXNlckFnZW50LFxuICAgICAgICAgICAgVmVyc2lvbjogJzEuMCcsXG4gICAgICAgICAgICBDb2duaXRvVXNlclBvb2w6IHtcbiAgICAgICAgICAgICAgRGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIFBvb2xJZDogY2xpZW50Q29uZmlnLmF3c191c2VyX3Bvb2xzX2lkLFxuICAgICAgICAgICAgICAgIEFwcENsaWVudElkOiBjbGllbnRDb25maWcuYXdzX3VzZXJfcG9vbHNfd2ViX2NsaWVudF9pZCxcbiAgICAgICAgICAgICAgICBSZWdpb246IGNsaWVudENvbmZpZy5hd3NfY29nbml0b19yZWdpb24sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQ3JlZGVudGlhbHNQcm92aWRlcjoge1xuICAgICAgICAgICAgICBDb2duaXRvSWRlbnRpdHk6IHtcbiAgICAgICAgICAgICAgICBEZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICBQb29sSWQ6IGNsaWVudENvbmZpZy5hd3NfY29nbml0b19pZGVudGl0eV9wb29sX2lkLFxuICAgICAgICAgICAgICAgICAgUmVnaW9uOiBjbGllbnRDb25maWcuYXdzX2NvZ25pdG9fcmVnaW9uLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQXV0aDoge1xuICAgICAgICAgICAgICBEZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRpb25GbG93VHlwZTogJ1VTRVJfU1JQX0FVVEgnLFxuICAgICAgICAgICAgICAgIG1mYUNvbmZpZ3VyYXRpb246IGNsaWVudENvbmZpZy5hd3NfY29nbml0b19tZmFfY29uZmlndXJhdGlvbixcbiAgICAgICAgICAgICAgICBtZmFUeXBlczogY2xpZW50Q29uZmlnLmF3c19jb2duaXRvX21mYV90eXBlcyxcbiAgICAgICAgICAgICAgICBwYXNzd29yZFByb3RlY3Rpb25TZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgcGFzc3dvcmRQb2xpY3lNaW5MZW5ndGg6XG4gICAgICAgICAgICAgICAgICAgIGNsaWVudENvbmZpZy5hd3NfY29nbml0b19wYXNzd29yZF9wcm90ZWN0aW9uX3NldHRpbmdzXG4gICAgICAgICAgICAgICAgICAgICAgPy5wYXNzd29yZFBvbGljeU1pbkxlbmd0aCxcbiAgICAgICAgICAgICAgICAgIHBhc3N3b3JkUG9saWN5Q2hhcmFjdGVyczpcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50Q29uZmlnLmF3c19jb2duaXRvX3Bhc3N3b3JkX3Byb3RlY3Rpb25fc2V0dGluZ3NcbiAgICAgICAgICAgICAgICAgICAgICA/LnBhc3N3b3JkUG9saWN5Q2hhcmFjdGVycyA/PyBbXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNpZ251cEF0dHJpYnV0ZXM6XG4gICAgICAgICAgICAgICAgICBjbGllbnRDb25maWcuYXdzX2NvZ25pdG9fc2lnbnVwX2F0dHJpYnV0ZXMgPz8gW10sXG4gICAgICAgICAgICAgICAgdXNlcm5hbWVBdHRyaWJ1dGVzOlxuICAgICAgICAgICAgICAgICAgY2xpZW50Q29uZmlnLmF3c19jb2duaXRvX3VzZXJuYW1lX2F0dHJpYnV0ZXMgPz8gW10sXG4gICAgICAgICAgICAgICAgdmVyaWZpY2F0aW9uTWVjaGFuaXNtczpcbiAgICAgICAgICAgICAgICAgIGNsaWVudENvbmZpZy5hd3NfY29nbml0b192ZXJpZmljYXRpb25fbWVjaGFuaXNtcyA/PyBbXSxcbiAgICAgICAgICAgICAgICBzb2NpYWxQcm92aWRlcnM6XG4gICAgICAgICAgICAgICAgICBjbGllbnRDb25maWcuYXdzX2NvZ25pdG9fc29jaWFsX3Byb3ZpZGVycyA/PyBbXSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBpZiAoY2xpZW50Q29uZmlnLm9hdXRoKSB7XG4gICAgICAgIGF1dGhDb25maWcucGx1Z2lucy5hd3NDb2duaXRvQXV0aFBsdWdpbi5BdXRoLkRlZmF1bHQuT0F1dGggPSB7XG4gICAgICAgICAgV2ViRG9tYWluOiBjbGllbnRDb25maWcub2F1dGguZG9tYWluLFxuICAgICAgICAgIFNjb3BlczogY2xpZW50Q29uZmlnLm9hdXRoLnNjb3BlLFxuICAgICAgICAgIFNpZ25JblJlZGlyZWN0VVJJOiBjbGllbnRDb25maWcub2F1dGgucmVkaXJlY3RTaWduSW4sXG4gICAgICAgICAgU2lnbk91dFJlZGlyZWN0VVJJOiBjbGllbnRDb25maWcub2F1dGgucmVkaXJlY3RTaWduT3V0LFxuICAgICAgICAgIEFwcENsaWVudElkOlxuICAgICAgICAgICAgY2xpZW50Q29uZmlnLm9hdXRoLmNsaWVudElkIHx8XG4gICAgICAgICAgICBjbGllbnRDb25maWcuYXdzX3VzZXJfcG9vbHNfd2ViX2NsaWVudF9pZCxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIG1vYmlsZUNvbmZpZy5hdXRoID0gYXV0aENvbmZpZztcbiAgICB9XG5cbiAgICBpZiAoY2xpZW50Q29uZmlnLmF3c19hcHBzeW5jX2dyYXBocWxFbmRwb2ludCkge1xuICAgICAgY29uc3QgYXBpQ29uZmlnOiBDbGllbnRDb25maWdNb2JpbGVBcGkgPSB7XG4gICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICBhd3NBUElQbHVnaW46IHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgZW5kcG9pbnRUeXBlOiAnR3JhcGhRTCcsXG4gICAgICAgICAgICAgIGVuZHBvaW50OiBjbGllbnRDb25maWcuYXdzX2FwcHN5bmNfZ3JhcGhxbEVuZHBvaW50LFxuICAgICAgICAgICAgICByZWdpb246IGNsaWVudENvbmZpZy5hd3NfYXBwc3luY19yZWdpb24sXG4gICAgICAgICAgICAgIGF1dGhvcml6YXRpb25UeXBlOiBjbGllbnRDb25maWcuYXdzX2FwcHN5bmNfYXV0aGVudGljYXRpb25UeXBlLFxuICAgICAgICAgICAgICBhcGlLZXk6IGNsaWVudENvbmZpZy5hd3NfYXBwc3luY19hcGlLZXksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgbW9iaWxlQ29uZmlnLmFwaSA9IGFwaUNvbmZpZztcblxuICAgICAgaWYgKG1vYmlsZUNvbmZpZy5hdXRoKSB7XG4gICAgICAgIGxldCBkZWZhdWx0Q2xpZW50RGF0YWJhc2VQcmVmaXggPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChjbGllbnRDb25maWcuYXdzX2FwcHN5bmNfYXV0aGVudGljYXRpb25UeXBlKSB7XG4gICAgICAgICAgZGVmYXVsdENsaWVudERhdGFiYXNlUHJlZml4ID0gYGRhdGFfJHtjbGllbnRDb25maWcuYXdzX2FwcHN5bmNfYXV0aGVudGljYXRpb25UeXBlfWA7XG4gICAgICAgIH1cbiAgICAgICAgbW9iaWxlQ29uZmlnLmF1dGgucGx1Z2lucy5hd3NDb2duaXRvQXV0aFBsdWdpbi5BcHBTeW5jID0ge1xuICAgICAgICAgIERlZmF1bHQ6IHtcbiAgICAgICAgICAgIEFwaVVybDogY2xpZW50Q29uZmlnLmF3c19hcHBzeW5jX2dyYXBocWxFbmRwb2ludCxcbiAgICAgICAgICAgIFJlZ2lvbjogY2xpZW50Q29uZmlnLmF3c19hcHBzeW5jX3JlZ2lvbixcbiAgICAgICAgICAgIEF1dGhNb2RlOiBjbGllbnRDb25maWcuYXdzX2FwcHN5bmNfYXV0aGVudGljYXRpb25UeXBlLFxuICAgICAgICAgICAgQXBpS2V5OiBjbGllbnRDb25maWcuYXdzX2FwcHN5bmNfYXBpS2V5LFxuICAgICAgICAgICAgQ2xpZW50RGF0YWJhc2VQcmVmaXg6IGRlZmF1bHRDbGllbnREYXRhYmFzZVByZWZpeCxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBpZiAoY2xpZW50Q29uZmlnLmF3c19hcHBzeW5jX2FkZGl0aW9uYWxBdXRoZW50aWNhdGlvblR5cGVzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBhZGRpdGlvbmFsQXV0aGVudGljYXRpb25UeXBlIG9mIGNsaWVudENvbmZpZy5hd3NfYXBwc3luY19hZGRpdGlvbmFsQXV0aGVudGljYXRpb25UeXBlcy5zcGxpdChcbiAgICAgICAgICAgICcsJyxcbiAgICAgICAgICApKSB7XG4gICAgICAgICAgICBtb2JpbGVDb25maWcuYXV0aC5wbHVnaW5zLmF3c0NvZ25pdG9BdXRoUGx1Z2luLkFwcFN5bmNbXG4gICAgICAgICAgICAgIGBkYXRhXyR7YWRkaXRpb25hbEF1dGhlbnRpY2F0aW9uVHlwZX1gXG4gICAgICAgICAgICBdID0ge1xuICAgICAgICAgICAgICBBcGlVcmw6IGNsaWVudENvbmZpZy5hd3NfYXBwc3luY19ncmFwaHFsRW5kcG9pbnQsXG4gICAgICAgICAgICAgIFJlZ2lvbjogY2xpZW50Q29uZmlnLmF3c19hcHBzeW5jX3JlZ2lvbixcbiAgICAgICAgICAgICAgQXV0aE1vZGU6IGFkZGl0aW9uYWxBdXRoZW50aWNhdGlvblR5cGUsXG4gICAgICAgICAgICAgIEFwaUtleTogY2xpZW50Q29uZmlnLmF3c19hcHBzeW5jX2FwaUtleSxcbiAgICAgICAgICAgICAgQ2xpZW50RGF0YWJhc2VQcmVmaXg6IGBkYXRhXyR7YWRkaXRpb25hbEF1dGhlbnRpY2F0aW9uVHlwZX1gLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xpZW50Q29uZmlnLmdlbykge1xuICAgICAgY29uc3QgZ2VvQ29uZmlnOiBDbGllbnRDb25maWdNb2JpbGVHZW8gPSB7XG4gICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICBhd3NMb2NhdGlvbkdlb1BsdWdpbjoge1xuICAgICAgICAgICAgcmVnaW9uOiBjbGllbnRDb25maWcuZ2VvLmFtYXpvbl9sb2NhdGlvbl9zZXJ2aWNlLnJlZ2lvbixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbWFwcyA9IGNsaWVudENvbmZpZy5nZW8uYW1hem9uX2xvY2F0aW9uX3NlcnZpY2UubWFwcztcbiAgICAgIGlmIChtYXBzKSB7XG4gICAgICAgIGdlb0NvbmZpZy5wbHVnaW5zLmF3c0xvY2F0aW9uR2VvUGx1Z2luLm1hcHMgPSBtYXBzO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2VhcmNoSW5kaWNlcyA9XG4gICAgICAgIGNsaWVudENvbmZpZy5nZW8uYW1hem9uX2xvY2F0aW9uX3NlcnZpY2Uuc2VhcmNoX2luZGljZXM7XG4gICAgICBpZiAoc2VhcmNoSW5kaWNlcykge1xuICAgICAgICBnZW9Db25maWcucGx1Z2lucy5hd3NMb2NhdGlvbkdlb1BsdWdpbi5zZWFyY2hJbmRpY2VzID0gc2VhcmNoSW5kaWNlcztcbiAgICAgIH1cblxuICAgICAgbW9iaWxlQ29uZmlnLmdlbyA9IGdlb0NvbmZpZztcbiAgICB9XG5cbiAgICBpZiAoY2xpZW50Q29uZmlnLkFuYWx5dGljcykge1xuICAgICAgbW9iaWxlQ29uZmlnLmFuYWx5dGljcyA9IHtcbiAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgIGF3c1BpbnBvaW50QW5hbHl0aWNzUGx1Z2luOiB7XG4gICAgICAgICAgICBwaW5wb2ludEFuYWx5dGljczoge1xuICAgICAgICAgICAgICByZWdpb246IGNsaWVudENvbmZpZy5BbmFseXRpY3MuUGlucG9pbnQucmVnaW9uLFxuICAgICAgICAgICAgICBhcHBJZDogY2xpZW50Q29uZmlnLkFuYWx5dGljcy5QaW5wb2ludC5hcHBJZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwaW5wb2ludFRhcmdldGluZzoge1xuICAgICAgICAgICAgICByZWdpb246IGNsaWVudENvbmZpZy5BbmFseXRpY3MuUGlucG9pbnQucmVnaW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoY2xpZW50Q29uZmlnLk5vdGlmaWNhdGlvbnMpIHtcbiAgICAgIG1vYmlsZUNvbmZpZy5ub3RpZmljYXRpb25zID0ge1xuICAgICAgICBwbHVnaW5zOiB7fSxcbiAgICAgIH07XG4gICAgICBpZiAoY2xpZW50Q29uZmlnLk5vdGlmaWNhdGlvbnMuU01TKSB7XG4gICAgICAgIG1vYmlsZUNvbmZpZy5ub3RpZmljYXRpb25zLnBsdWdpbnMuYXdzUGlucG9pbnRTbXNOb3RpZmljYXRpb25zUGx1Z2luID1cbiAgICAgICAgICBjbGllbnRDb25maWcuTm90aWZpY2F0aW9ucy5TTVMuQVdTUGlucG9pbnQ7XG4gICAgICB9XG4gICAgICBpZiAoY2xpZW50Q29uZmlnLk5vdGlmaWNhdGlvbnMuRU1BSUwpIHtcbiAgICAgICAgbW9iaWxlQ29uZmlnLm5vdGlmaWNhdGlvbnMucGx1Z2lucy5hd3NQaW5wb2ludEVtYWlsTm90aWZpY2F0aW9uc1BsdWdpbiA9XG4gICAgICAgICAgY2xpZW50Q29uZmlnLk5vdGlmaWNhdGlvbnMuRU1BSUwuQVdTUGlucG9pbnQ7XG4gICAgICB9XG4gICAgICBpZiAoY2xpZW50Q29uZmlnLk5vdGlmaWNhdGlvbnMuSW5BcHBNZXNzYWdpbmcpIHtcbiAgICAgICAgbW9iaWxlQ29uZmlnLm5vdGlmaWNhdGlvbnMucGx1Z2lucy5hd3NQaW5wb2ludEluQXBwTWVzc2FnaW5nTm90aWZpY2F0aW9uc1BsdWdpbiA9XG4gICAgICAgICAgY2xpZW50Q29uZmlnLk5vdGlmaWNhdGlvbnMuSW5BcHBNZXNzYWdpbmcuQVdTUGlucG9pbnQ7XG4gICAgICB9XG4gICAgICBpZiAoY2xpZW50Q29uZmlnLk5vdGlmaWNhdGlvbnMuUHVzaCkge1xuICAgICAgICBtb2JpbGVDb25maWcubm90aWZpY2F0aW9ucy5wbHVnaW5zLmF3c1BpbnBvaW50UHVzaE5vdGlmaWNhdGlvbnNQbHVnaW4gPVxuICAgICAgICAgIGNsaWVudENvbmZpZy5Ob3RpZmljYXRpb25zLlB1c2guQVdTUGlucG9pbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsaWVudENvbmZpZy5hd3NfdXNlcl9maWxlc19zM19idWNrZXQpIHtcbiAgICAgIG1vYmlsZUNvbmZpZy5zdG9yYWdlID0ge1xuICAgICAgICBwbHVnaW5zOiB7XG4gICAgICAgICAgYXdzUzNTdG9yYWdlUGx1Z2luOiB7XG4gICAgICAgICAgICBidWNrZXQ6IGNsaWVudENvbmZpZy5hd3NfdXNlcl9maWxlc19zM19idWNrZXQsXG4gICAgICAgICAgICByZWdpb246IGNsaWVudENvbmZpZy5hd3NfdXNlcl9maWxlc19zM19idWNrZXRfcmVnaW9uLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBtb2JpbGVDb25maWc7XG4gIH07XG59XG4iXX0=