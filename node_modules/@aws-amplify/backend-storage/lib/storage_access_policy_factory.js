import { Effect, Policy, PolicyStatement } from 'aws-cdk-lib/aws-iam';
import { Stack } from 'aws-cdk-lib';
import { AmplifyFault } from '@aws-amplify/platform-core';
/**
 * Generates IAM policies scoped to a single bucket
 */
export class StorageAccessPolicyFactory {
    bucket;
    stack;
    /**
     * Instantiate with the bucket to generate policies for
     */
    constructor(bucket) {
        this.bucket = bucket;
        this.stack = Stack.of(bucket);
    }
    createPolicy = (permissions) => {
        if (permissions.size === 0) {
            throw new AmplifyFault('EmptyPolicyFault', {
                message: 'At least one permission must be specified',
            });
        }
        const statements = [];
        permissions.forEach(({ allow: allowPrefixes, deny: denyPrefixes }, action) => {
            if (allowPrefixes.size > 0) {
                statements.push(this.getStatement(allowPrefixes, action, Effect.ALLOW));
            }
            if (denyPrefixes.size > 0) {
                statements.push(this.getStatement(denyPrefixes, action, Effect.DENY));
            }
        });
        if (statements.length === 0) {
            // this could happen if the Map contained entries but all of the path sets were empty
            throw new AmplifyFault('EmptyPolicyFault', {
                message: 'At least one permission must be specified',
            });
        }
        return new Policy(this.stack, `${this.stack.node.path}Access${this.stack.node.children.length}`, {
            statements,
        });
    };
    getStatement = (s3Prefixes, action, effect) => {
        switch (action) {
            case 'delete':
            case 'get':
            case 'write':
                return new PolicyStatement({
                    effect,
                    actions: actionMap[action],
                    resources: Array.from(s3Prefixes).map((s3Prefix) => `${this.bucket.bucketArn}/${s3Prefix}`),
                });
            case 'list':
                return new PolicyStatement({
                    effect,
                    actions: actionMap[action],
                    resources: [this.bucket.bucketArn],
                    conditions: {
                        StringLike: {
                            's3:prefix': Array.from(s3Prefixes).flatMap(toConditionPrefix),
                        },
                    },
                });
        }
    };
}
const actionMap = {
    get: ['s3:GetObject'],
    list: ['s3:ListBucket'],
    write: ['s3:PutObject'],
    delete: ['s3:DeleteObject'],
};
/**
 * Converts a prefix like foo/bar/* into [foo/bar/, foo/bar/*]
 * This is necessary to grant the ability to list all objects directly in "foo/bar" and all objects under "foo/bar"
 */
const toConditionPrefix = (prefix) => {
    const noTrailingWildcard = prefix.slice(0, -1);
    return [prefix, noTrailingWildcard];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZV9hY2Nlc3NfcG9saWN5X2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RvcmFnZV9hY2Nlc3NfcG9saWN5X2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFZMUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTBCO0lBTVI7SUFMWixLQUFLLENBQVE7SUFFOUI7O09BRUc7SUFDSCxZQUE2QixNQUFlO1FBQWYsV0FBTSxHQUFOLE1BQU0sQ0FBUztRQUMxQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELFlBQVksR0FBRyxDQUNiLFdBR0MsRUFDRCxFQUFFO1FBQ0YsSUFBSSxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRTtZQUMxQixNQUFNLElBQUksWUFBWSxDQUFDLGtCQUFrQixFQUFFO2dCQUN6QyxPQUFPLEVBQUUsMkNBQTJDO2FBQ3JELENBQUMsQ0FBQztTQUNKO1FBRUQsTUFBTSxVQUFVLEdBQXNCLEVBQUUsQ0FBQztRQUV6QyxXQUFXLENBQUMsT0FBTyxDQUNqQixDQUFDLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDdkQsSUFBSSxhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtnQkFDMUIsVUFBVSxDQUFDLElBQUksQ0FDYixJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUN2RCxDQUFDO2FBQ0g7WUFDRCxJQUFJLFlBQVksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QixVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUN2RTtRQUNILENBQUMsQ0FDRixDQUFDO1FBRUYsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMzQixxRkFBcUY7WUFDckYsTUFBTSxJQUFJLFlBQVksQ0FBQyxrQkFBa0IsRUFBRTtnQkFDekMsT0FBTyxFQUFFLDJDQUEyQzthQUNyRCxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxNQUFNLENBQ2YsSUFBSSxDQUFDLEtBQUssRUFDVixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQ2pFO1lBQ0UsVUFBVTtTQUNYLENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVNLFlBQVksR0FBRyxDQUNyQixVQUFzQyxFQUN0QyxNQUE2QixFQUM3QixNQUFjLEVBQ2QsRUFBRTtRQUNGLFFBQVEsTUFBTSxFQUFFO1lBQ2QsS0FBSyxRQUFRLENBQUM7WUFDZCxLQUFLLEtBQUssQ0FBQztZQUNYLEtBQUssT0FBTztnQkFDVixPQUFPLElBQUksZUFBZSxDQUFDO29CQUN6QixNQUFNO29CQUNOLE9BQU8sRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDO29CQUMxQixTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQ25DLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLFFBQVEsRUFBRSxDQUNyRDtpQkFDRixDQUFDLENBQUM7WUFDTCxLQUFLLE1BQU07Z0JBQ1QsT0FBTyxJQUFJLGVBQWUsQ0FBQztvQkFDekIsTUFBTTtvQkFDTixPQUFPLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQztvQkFDMUIsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7b0JBQ2xDLFVBQVUsRUFBRTt3QkFDVixVQUFVLEVBQUU7NEJBQ1YsV0FBVyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO3lCQUMvRDtxQkFDRjtpQkFDRixDQUFDLENBQUM7U0FDTjtJQUNILENBQUMsQ0FBQztDQUNIO0FBRUQsTUFBTSxTQUFTLEdBQTRDO0lBQ3pELEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQztJQUNyQixJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUM7SUFDdkIsS0FBSyxFQUFFLENBQUMsY0FBYyxDQUFDO0lBQ3ZCLE1BQU0sRUFBRSxDQUFDLGlCQUFpQixDQUFDO0NBQzVCLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxNQUFNLGlCQUFpQixHQUFHLENBQUMsTUFBbUIsRUFBRSxFQUFFO0lBQ2hELE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQyxPQUFPLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUJ1Y2tldCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMyc7XG5pbXBvcnQgeyBFZmZlY3QsIFBvbGljeSwgUG9saWN5U3RhdGVtZW50IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBTdGFjayB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEFtcGxpZnlGYXVsdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IFN0b3JhZ2VBY3Rpb24sIFN0b3JhZ2VQYXRoIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBJbnRlcm5hbFN0b3JhZ2VBY3Rpb24gfSBmcm9tICcuL3ByaXZhdGVfdHlwZXMuanMnO1xuXG5leHBvcnQgdHlwZSBQZXJtaXNzaW9uID0ge1xuICBhY3Rpb25zOiBTdG9yYWdlQWN0aW9uW107XG4gIC8qKlxuICAgKiBBbiBzMyBwcmVmaXggdGhhdCBkZWZpbmVzIHRoZSBzY29wZSBvZiB0aGUgYWN0aW9uc1xuICAgKi9cbiAgcmVzb3VyY2VzOiBzdHJpbmdbXTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIElBTSBwb2xpY2llcyBzY29wZWQgdG8gYSBzaW5nbGUgYnVja2V0XG4gKi9cbmV4cG9ydCBjbGFzcyBTdG9yYWdlQWNjZXNzUG9saWN5RmFjdG9yeSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RhY2s6IFN0YWNrO1xuXG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZSB3aXRoIHRoZSBidWNrZXQgdG8gZ2VuZXJhdGUgcG9saWNpZXMgZm9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGJ1Y2tldDogSUJ1Y2tldCkge1xuICAgIHRoaXMuc3RhY2sgPSBTdGFjay5vZihidWNrZXQpO1xuICB9XG5cbiAgY3JlYXRlUG9saWN5ID0gKFxuICAgIHBlcm1pc3Npb25zOiBNYXA8XG4gICAgICBJbnRlcm5hbFN0b3JhZ2VBY3Rpb24sXG4gICAgICB7IGFsbG93OiBTZXQ8U3RvcmFnZVBhdGg+OyBkZW55OiBTZXQ8U3RvcmFnZVBhdGg+IH1cbiAgICA+LFxuICApID0+IHtcbiAgICBpZiAocGVybWlzc2lvbnMuc2l6ZSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlGYXVsdCgnRW1wdHlQb2xpY3lGYXVsdCcsIHtcbiAgICAgICAgbWVzc2FnZTogJ0F0IGxlYXN0IG9uZSBwZXJtaXNzaW9uIG11c3QgYmUgc3BlY2lmaWVkJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXRlbWVudHM6IFBvbGljeVN0YXRlbWVudFtdID0gW107XG5cbiAgICBwZXJtaXNzaW9ucy5mb3JFYWNoKFxuICAgICAgKHsgYWxsb3c6IGFsbG93UHJlZml4ZXMsIGRlbnk6IGRlbnlQcmVmaXhlcyB9LCBhY3Rpb24pID0+IHtcbiAgICAgICAgaWYgKGFsbG93UHJlZml4ZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICBzdGF0ZW1lbnRzLnB1c2goXG4gICAgICAgICAgICB0aGlzLmdldFN0YXRlbWVudChhbGxvd1ByZWZpeGVzLCBhY3Rpb24sIEVmZmVjdC5BTExPVyksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVueVByZWZpeGVzLnNpemUgPiAwKSB7XG4gICAgICAgICAgc3RhdGVtZW50cy5wdXNoKHRoaXMuZ2V0U3RhdGVtZW50KGRlbnlQcmVmaXhlcywgYWN0aW9uLCBFZmZlY3QuREVOWSkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG5cbiAgICBpZiAoc3RhdGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIHRoaXMgY291bGQgaGFwcGVuIGlmIHRoZSBNYXAgY29udGFpbmVkIGVudHJpZXMgYnV0IGFsbCBvZiB0aGUgcGF0aCBzZXRzIHdlcmUgZW1wdHlcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoJ0VtcHR5UG9saWN5RmF1bHQnLCB7XG4gICAgICAgIG1lc3NhZ2U6ICdBdCBsZWFzdCBvbmUgcGVybWlzc2lvbiBtdXN0IGJlIHNwZWNpZmllZCcsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFBvbGljeShcbiAgICAgIHRoaXMuc3RhY2ssXG4gICAgICBgJHt0aGlzLnN0YWNrLm5vZGUucGF0aH1BY2Nlc3Mke3RoaXMuc3RhY2subm9kZS5jaGlsZHJlbi5sZW5ndGh9YCxcbiAgICAgIHtcbiAgICAgICAgc3RhdGVtZW50cyxcbiAgICAgIH0sXG4gICAgKTtcbiAgfTtcblxuICBwcml2YXRlIGdldFN0YXRlbWVudCA9IChcbiAgICBzM1ByZWZpeGVzOiBSZWFkb25seTxTZXQ8U3RvcmFnZVBhdGg+PixcbiAgICBhY3Rpb246IEludGVybmFsU3RvcmFnZUFjdGlvbixcbiAgICBlZmZlY3Q6IEVmZmVjdCxcbiAgKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICBjYXNlICdnZXQnOlxuICAgICAgY2FzZSAnd3JpdGUnOlxuICAgICAgICByZXR1cm4gbmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgZWZmZWN0LFxuICAgICAgICAgIGFjdGlvbnM6IGFjdGlvbk1hcFthY3Rpb25dLFxuICAgICAgICAgIHJlc291cmNlczogQXJyYXkuZnJvbShzM1ByZWZpeGVzKS5tYXAoXG4gICAgICAgICAgICAoczNQcmVmaXgpID0+IGAke3RoaXMuYnVja2V0LmJ1Y2tldEFybn0vJHtzM1ByZWZpeH1gLFxuICAgICAgICAgICksXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnbGlzdCc6XG4gICAgICAgIHJldHVybiBuZXcgUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICBlZmZlY3QsXG4gICAgICAgICAgYWN0aW9uczogYWN0aW9uTWFwW2FjdGlvbl0sXG4gICAgICAgICAgcmVzb3VyY2VzOiBbdGhpcy5idWNrZXQuYnVja2V0QXJuXSxcbiAgICAgICAgICBjb25kaXRpb25zOiB7XG4gICAgICAgICAgICBTdHJpbmdMaWtlOiB7XG4gICAgICAgICAgICAgICdzMzpwcmVmaXgnOiBBcnJheS5mcm9tKHMzUHJlZml4ZXMpLmZsYXRNYXAodG9Db25kaXRpb25QcmVmaXgpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmNvbnN0IGFjdGlvbk1hcDogUmVjb3JkPEludGVybmFsU3RvcmFnZUFjdGlvbiwgc3RyaW5nW10+ID0ge1xuICBnZXQ6IFsnczM6R2V0T2JqZWN0J10sXG4gIGxpc3Q6IFsnczM6TGlzdEJ1Y2tldCddLFxuICB3cml0ZTogWydzMzpQdXRPYmplY3QnXSxcbiAgZGVsZXRlOiBbJ3MzOkRlbGV0ZU9iamVjdCddLFxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHByZWZpeCBsaWtlIGZvby9iYXIvKiBpbnRvIFtmb28vYmFyLywgZm9vL2Jhci8qXVxuICogVGhpcyBpcyBuZWNlc3NhcnkgdG8gZ3JhbnQgdGhlIGFiaWxpdHkgdG8gbGlzdCBhbGwgb2JqZWN0cyBkaXJlY3RseSBpbiBcImZvby9iYXJcIiBhbmQgYWxsIG9iamVjdHMgdW5kZXIgXCJmb28vYmFyXCJcbiAqL1xuY29uc3QgdG9Db25kaXRpb25QcmVmaXggPSAocHJlZml4OiBTdG9yYWdlUGF0aCkgPT4ge1xuICBjb25zdCBub1RyYWlsaW5nV2lsZGNhcmQgPSBwcmVmaXguc2xpY2UoMCwgLTEpO1xuICByZXR1cm4gW3ByZWZpeCwgbm9UcmFpbGluZ1dpbGRjYXJkXTtcbn07XG4iXX0=