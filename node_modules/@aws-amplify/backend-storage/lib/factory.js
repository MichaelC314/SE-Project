import * as path from 'path';
import { StorageContainerEntryGenerator } from './storage_container_entry_generator.js';
import { Aspects, Stack } from 'aws-cdk-lib';
import { StorageOutputsAspect } from './storage_outputs_aspect.js';
/**
 * Singleton factory for a Storage bucket that can be used in `resource.ts` files
 */
export class AmplifyStorageFactory {
    props;
    importStack;
    generator;
    /**
     * Set the properties that will be used to initialize the bucket
     */
    constructor(props, importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
    }
    /**
     * Get a singleton instance of the Bucket
     */
    getInstance = (getInstanceProps) => {
        const { constructContainer, importPathVerifier, resourceNameValidator } = getInstanceProps;
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'storage', 'resource'), 'Amplify Storage must be defined in amplify/storage/resource.ts');
        resourceNameValidator?.validate(this.props.name);
        if (!this.generator) {
            this.generator = new StorageContainerEntryGenerator(this.props, getInstanceProps);
        }
        const amplifyStorage = constructContainer.getOrCompute(this.generator);
        /*
         * only call Aspects once,
         * otherwise there will be the an error -
         * "there is already a construct with name 'storageRegion'"
         */
        const aspects = Aspects.of(Stack.of(amplifyStorage));
        if (!aspects.all.length) {
            aspects.add(new StorageOutputsAspect(getInstanceProps.outputStorageStrategy));
        }
        return amplifyStorage;
    };
}
/**
 * Include storage in your Amplify backend.
 * @see https://docs.amplify.aws/gen2/build-a-backend/storage/
 */
export const defineStorage = (props) => new AmplifyStorageFactory(props, new Error().stack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sS0FBSyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRzdCLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRW5FOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQVNiO0lBQ0E7SUFQWCxTQUFTLENBQW1DO0lBRXBEOztPQUVHO0lBQ0gsWUFDbUIsS0FBaUMsRUFDakMsY0FBYyxJQUFJLEtBQUssRUFBRSxDQUFDLEtBQUs7UUFEL0IsVUFBSyxHQUFMLEtBQUssQ0FBNEI7UUFDakMsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO0lBQy9DLENBQUM7SUFFSjs7T0FFRztJQUNILFdBQVcsR0FBRyxDQUNaLGdCQUFrRCxFQUNsQyxFQUFFO1FBQ2xCLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUIsRUFBRSxHQUNyRSxnQkFBZ0IsQ0FBQztRQUNuQixrQkFBa0IsRUFBRSxNQUFNLENBQ3hCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsRUFDM0MsZ0VBQWdFLENBQ2pFLENBQUM7UUFDRixxQkFBcUIsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqRCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksOEJBQThCLENBQ2pELElBQUksQ0FBQyxLQUFLLEVBQ1YsZ0JBQWdCLENBQ2pCLENBQUM7U0FDSDtRQUNELE1BQU0sY0FBYyxHQUFHLGtCQUFrQixDQUFDLFlBQVksQ0FDcEQsSUFBSSxDQUFDLFNBQVMsQ0FDRyxDQUFDO1FBRXBCOzs7O1dBSUc7UUFDSCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FDVCxJQUFJLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQ2pFLENBQUM7U0FDSDtRQUVELE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUMsQ0FBQztDQUNIO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQzNCLEtBQWlDLEVBQ3FDLEVBQUUsQ0FDeEUsSUFBSSxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yLFxuICBDb25zdHJ1Y3RGYWN0b3J5LFxuICBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wcyxcbiAgUmVzb3VyY2VQcm92aWRlcixcbiAgU3RhY2tQcm92aWRlcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQW1wbGlmeVN0b3JhZ2UsIFN0b3JhZ2VSZXNvdXJjZXMgfSBmcm9tICcuL2NvbnN0cnVjdC5qcyc7XG5pbXBvcnQgeyBBbXBsaWZ5U3RvcmFnZUZhY3RvcnlQcm9wcyB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHsgU3RvcmFnZUNvbnRhaW5lckVudHJ5R2VuZXJhdG9yIH0gZnJvbSAnLi9zdG9yYWdlX2NvbnRhaW5lcl9lbnRyeV9nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgQXNwZWN0cywgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBTdG9yYWdlT3V0cHV0c0FzcGVjdCB9IGZyb20gJy4vc3RvcmFnZV9vdXRwdXRzX2FzcGVjdC5qcyc7XG5cbi8qKlxuICogU2luZ2xldG9uIGZhY3RvcnkgZm9yIGEgU3RvcmFnZSBidWNrZXQgdGhhdCBjYW4gYmUgdXNlZCBpbiBgcmVzb3VyY2UudHNgIGZpbGVzXG4gKi9cbmV4cG9ydCBjbGFzcyBBbXBsaWZ5U3RvcmFnZUZhY3RvcnlcbiAgaW1wbGVtZW50cyBDb25zdHJ1Y3RGYWN0b3J5PFJlc291cmNlUHJvdmlkZXI8U3RvcmFnZVJlc291cmNlcz4+XG57XG4gIHByaXZhdGUgZ2VuZXJhdG9yOiBDb25zdHJ1Y3RDb250YWluZXJFbnRyeUdlbmVyYXRvcjtcblxuICAvKipcbiAgICogU2V0IHRoZSBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemUgdGhlIGJ1Y2tldFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogQW1wbGlmeVN0b3JhZ2VGYWN0b3J5UHJvcHMsXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbXBvcnRTdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIEdldCBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUgQnVja2V0XG4gICAqL1xuICBnZXRJbnN0YW5jZSA9IChcbiAgICBnZXRJbnN0YW5jZVByb3BzOiBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wcyxcbiAgKTogQW1wbGlmeVN0b3JhZ2UgPT4ge1xuICAgIGNvbnN0IHsgY29uc3RydWN0Q29udGFpbmVyLCBpbXBvcnRQYXRoVmVyaWZpZXIsIHJlc291cmNlTmFtZVZhbGlkYXRvciB9ID1cbiAgICAgIGdldEluc3RhbmNlUHJvcHM7XG4gICAgaW1wb3J0UGF0aFZlcmlmaWVyPy52ZXJpZnkoXG4gICAgICB0aGlzLmltcG9ydFN0YWNrLFxuICAgICAgcGF0aC5qb2luKCdhbXBsaWZ5JywgJ3N0b3JhZ2UnLCAncmVzb3VyY2UnKSxcbiAgICAgICdBbXBsaWZ5IFN0b3JhZ2UgbXVzdCBiZSBkZWZpbmVkIGluIGFtcGxpZnkvc3RvcmFnZS9yZXNvdXJjZS50cycsXG4gICAgKTtcbiAgICByZXNvdXJjZU5hbWVWYWxpZGF0b3I/LnZhbGlkYXRlKHRoaXMucHJvcHMubmFtZSk7XG5cbiAgICBpZiAoIXRoaXMuZ2VuZXJhdG9yKSB7XG4gICAgICB0aGlzLmdlbmVyYXRvciA9IG5ldyBTdG9yYWdlQ29udGFpbmVyRW50cnlHZW5lcmF0b3IoXG4gICAgICAgIHRoaXMucHJvcHMsXG4gICAgICAgIGdldEluc3RhbmNlUHJvcHMsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBhbXBsaWZ5U3RvcmFnZSA9IGNvbnN0cnVjdENvbnRhaW5lci5nZXRPckNvbXB1dGUoXG4gICAgICB0aGlzLmdlbmVyYXRvcixcbiAgICApIGFzIEFtcGxpZnlTdG9yYWdlO1xuXG4gICAgLypcbiAgICAgKiBvbmx5IGNhbGwgQXNwZWN0cyBvbmNlLFxuICAgICAqIG90aGVyd2lzZSB0aGVyZSB3aWxsIGJlIHRoZSBhbiBlcnJvciAtXG4gICAgICogXCJ0aGVyZSBpcyBhbHJlYWR5IGEgY29uc3RydWN0IHdpdGggbmFtZSAnc3RvcmFnZVJlZ2lvbidcIlxuICAgICAqL1xuICAgIGNvbnN0IGFzcGVjdHMgPSBBc3BlY3RzLm9mKFN0YWNrLm9mKGFtcGxpZnlTdG9yYWdlKSk7XG4gICAgaWYgKCFhc3BlY3RzLmFsbC5sZW5ndGgpIHtcbiAgICAgIGFzcGVjdHMuYWRkKFxuICAgICAgICBuZXcgU3RvcmFnZU91dHB1dHNBc3BlY3QoZ2V0SW5zdGFuY2VQcm9wcy5vdXRwdXRTdG9yYWdlU3RyYXRlZ3kpLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYW1wbGlmeVN0b3JhZ2U7XG4gIH07XG59XG5cbi8qKlxuICogSW5jbHVkZSBzdG9yYWdlIGluIHlvdXIgQW1wbGlmeSBiYWNrZW5kLlxuICogQHNlZSBodHRwczovL2RvY3MuYW1wbGlmeS5hd3MvZ2VuMi9idWlsZC1hLWJhY2tlbmQvc3RvcmFnZS9cbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmluZVN0b3JhZ2UgPSAoXG4gIHByb3BzOiBBbXBsaWZ5U3RvcmFnZUZhY3RvcnlQcm9wcyxcbik6IENvbnN0cnVjdEZhY3Rvcnk8UmVzb3VyY2VQcm92aWRlcjxTdG9yYWdlUmVzb3VyY2VzPiAmIFN0YWNrUHJvdmlkZXI+ID0+XG4gIG5ldyBBbXBsaWZ5U3RvcmFnZUZhY3RvcnkocHJvcHMsIG5ldyBFcnJvcigpLnN0YWNrKTtcbiJdfQ==