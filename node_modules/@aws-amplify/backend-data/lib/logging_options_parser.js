import { LogLevelConverter, LogRetentionConverter, } from '@aws-amplify/platform-core/cdk';
const DEFAULT_EXCLUDE_VERBOSE_CONTENT = true;
const DEFAULT_LEVEL = 'none';
const DEFAULT_RETENTION = '1 week';
/**
 * Converts logging options to CDK.
 */
export const convertLoggingOptionsToCDK = (loggingOptions) => {
    if (!loggingOptions) {
        return undefined;
    }
    // Determine if we should apply default configuration
    const shouldApplyDefaultLogging = loggingOptions === true ||
        (typeof loggingOptions === 'object' &&
            Object.keys(loggingOptions).length === 0);
    // Extract fields from the user's loggingOptions (if it's an object)
    const config = typeof loggingOptions === 'object' ? loggingOptions : {};
    const excludeVerboseContent = shouldApplyDefaultLogging
        ? DEFAULT_EXCLUDE_VERBOSE_CONTENT
        : (config.excludeVerboseContent ?? DEFAULT_EXCLUDE_VERBOSE_CONTENT);
    // For level and retention, we rely on converters. If config is empty or logging is true, use defaults.
    const dataLogLevel = shouldApplyDefaultLogging
        ? DEFAULT_LEVEL
        : (config.fieldLogLevel ?? DEFAULT_LEVEL);
    const logRetention = shouldApplyDefaultLogging
        ? DEFAULT_RETENTION
        : (config.retention ?? DEFAULT_RETENTION);
    const fieldLogLevel = new LogLevelConverter().toCDKAppsyncFieldLogLevel(dataLogLevel);
    const retention = new LogRetentionConverter().toCDKRetentionDays(logRetention);
    return {
        excludeVerboseContent,
        fieldLogLevel,
        retention,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZ19vcHRpb25zX3BhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9sb2dnaW5nX29wdGlvbnNfcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIscUJBQXFCLEdBQ3RCLE1BQU0sZ0NBQWdDLENBQUM7QUFXeEMsTUFBTSwrQkFBK0IsR0FBWSxJQUFJLENBQUM7QUFDdEQsTUFBTSxhQUFhLEdBQWlCLE1BQU0sQ0FBQztBQUMzQyxNQUFNLGlCQUFpQixHQUFpQixRQUFRLENBQUM7QUFFakQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUN4QyxjQUE4QyxFQUNmLEVBQUU7SUFDakMsSUFBSSxDQUFDLGNBQWMsRUFBRTtRQUNuQixPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUVELHFEQUFxRDtJQUNyRCxNQUFNLHlCQUF5QixHQUM3QixjQUFjLEtBQUssSUFBSTtRQUN2QixDQUFDLE9BQU8sY0FBYyxLQUFLLFFBQVE7WUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFOUMsb0VBQW9FO0lBQ3BFLE1BQU0sTUFBTSxHQUNWLE9BQU8sY0FBYyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFM0QsTUFBTSxxQkFBcUIsR0FBRyx5QkFBeUI7UUFDckQsQ0FBQyxDQUFDLCtCQUErQjtRQUNqQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMscUJBQXFCLElBQUksK0JBQStCLENBQUMsQ0FBQztJQUV0RSx1R0FBdUc7SUFDdkcsTUFBTSxZQUFZLEdBQUcseUJBQXlCO1FBQzVDLENBQUMsQ0FBQyxhQUFhO1FBQ2YsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsSUFBSSxhQUFhLENBQUMsQ0FBQztJQUU1QyxNQUFNLFlBQVksR0FBRyx5QkFBeUI7UUFDNUMsQ0FBQyxDQUFDLGlCQUFpQjtRQUNuQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLGlCQUFpQixDQUFDLENBQUM7SUFFNUMsTUFBTSxhQUFhLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLHlCQUF5QixDQUNyRSxZQUFZLENBQ1osQ0FBQztJQUNILE1BQU0sU0FBUyxHQUFHLElBQUkscUJBQXFCLEVBQUUsQ0FBQyxrQkFBa0IsQ0FDOUQsWUFBWSxDQUNaLENBQUM7SUFFSCxPQUFPO1FBQ0wscUJBQXFCO1FBQ3JCLGFBQWE7UUFDYixTQUFTO0tBQ1YsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFMb2dMZXZlbCwgRGF0YUxvZ2dpbmdPcHRpb25zIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQge1xuICBMb2dMZXZlbENvbnZlcnRlcixcbiAgTG9nUmV0ZW50aW9uQ29udmVydGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZS9jZGsnO1xuaW1wb3J0IHsgUmV0ZW50aW9uRGF5cyB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sb2dzJztcbmltcG9ydCB7IEZpZWxkTG9nTGV2ZWwgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYXBwc3luYyc7XG5pbXBvcnQgeyBMb2dSZXRlbnRpb24gfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcblxuZXhwb3J0IHR5cGUgQ0RLTG9nZ2luZ09wdGlvbnMgPSB7XG4gIGV4Y2x1ZGVWZXJib3NlQ29udGVudDogYm9vbGVhbjtcbiAgZmllbGRMb2dMZXZlbDogRmllbGRMb2dMZXZlbDtcbiAgcmV0ZW50aW9uOiBSZXRlbnRpb25EYXlzO1xufTtcblxuY29uc3QgREVGQVVMVF9FWENMVURFX1ZFUkJPU0VfQ09OVEVOVDogYm9vbGVhbiA9IHRydWU7XG5jb25zdCBERUZBVUxUX0xFVkVMOiBEYXRhTG9nTGV2ZWwgPSAnbm9uZSc7XG5jb25zdCBERUZBVUxUX1JFVEVOVElPTjogTG9nUmV0ZW50aW9uID0gJzEgd2Vlayc7XG5cbi8qKlxuICogQ29udmVydHMgbG9nZ2luZyBvcHRpb25zIHRvIENESy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnZlcnRMb2dnaW5nT3B0aW9uc1RvQ0RLID0gKFxuICBsb2dnaW5nT3B0aW9uczogRGF0YUxvZ2dpbmdPcHRpb25zIHwgdW5kZWZpbmVkLFxuKTogQ0RLTG9nZ2luZ09wdGlvbnMgfCB1bmRlZmluZWQgPT4ge1xuICBpZiAoIWxvZ2dpbmdPcHRpb25zKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIERldGVybWluZSBpZiB3ZSBzaG91bGQgYXBwbHkgZGVmYXVsdCBjb25maWd1cmF0aW9uXG4gIGNvbnN0IHNob3VsZEFwcGx5RGVmYXVsdExvZ2dpbmcgPVxuICAgIGxvZ2dpbmdPcHRpb25zID09PSB0cnVlIHx8XG4gICAgKHR5cGVvZiBsb2dnaW5nT3B0aW9ucyA9PT0gJ29iamVjdCcgJiZcbiAgICAgIE9iamVjdC5rZXlzKGxvZ2dpbmdPcHRpb25zKS5sZW5ndGggPT09IDApO1xuXG4gIC8vIEV4dHJhY3QgZmllbGRzIGZyb20gdGhlIHVzZXIncyBsb2dnaW5nT3B0aW9ucyAoaWYgaXQncyBhbiBvYmplY3QpXG4gIGNvbnN0IGNvbmZpZzogRGF0YUxvZ2dpbmdPcHRpb25zID1cbiAgICB0eXBlb2YgbG9nZ2luZ09wdGlvbnMgPT09ICdvYmplY3QnID8gbG9nZ2luZ09wdGlvbnMgOiB7fTtcblxuICBjb25zdCBleGNsdWRlVmVyYm9zZUNvbnRlbnQgPSBzaG91bGRBcHBseURlZmF1bHRMb2dnaW5nXG4gICAgPyBERUZBVUxUX0VYQ0xVREVfVkVSQk9TRV9DT05URU5UXG4gICAgOiAoY29uZmlnLmV4Y2x1ZGVWZXJib3NlQ29udGVudCA/PyBERUZBVUxUX0VYQ0xVREVfVkVSQk9TRV9DT05URU5UKTtcblxuICAvLyBGb3IgbGV2ZWwgYW5kIHJldGVudGlvbiwgd2UgcmVseSBvbiBjb252ZXJ0ZXJzLiBJZiBjb25maWcgaXMgZW1wdHkgb3IgbG9nZ2luZyBpcyB0cnVlLCB1c2UgZGVmYXVsdHMuXG4gIGNvbnN0IGRhdGFMb2dMZXZlbCA9IHNob3VsZEFwcGx5RGVmYXVsdExvZ2dpbmdcbiAgICA/IERFRkFVTFRfTEVWRUxcbiAgICA6IChjb25maWcuZmllbGRMb2dMZXZlbCA/PyBERUZBVUxUX0xFVkVMKTtcblxuICBjb25zdCBsb2dSZXRlbnRpb24gPSBzaG91bGRBcHBseURlZmF1bHRMb2dnaW5nXG4gICAgPyBERUZBVUxUX1JFVEVOVElPTlxuICAgIDogKGNvbmZpZy5yZXRlbnRpb24gPz8gREVGQVVMVF9SRVRFTlRJT04pO1xuXG4gIGNvbnN0IGZpZWxkTG9nTGV2ZWwgPSBuZXcgTG9nTGV2ZWxDb252ZXJ0ZXIoKS50b0NES0FwcHN5bmNGaWVsZExvZ0xldmVsKFxuICAgIGRhdGFMb2dMZXZlbCxcbiAgKSE7XG4gIGNvbnN0IHJldGVudGlvbiA9IG5ldyBMb2dSZXRlbnRpb25Db252ZXJ0ZXIoKS50b0NES1JldGVudGlvbkRheXMoXG4gICAgbG9nUmV0ZW50aW9uLFxuICApITtcblxuICByZXR1cm4ge1xuICAgIGV4Y2x1ZGVWZXJib3NlQ29udGVudCxcbiAgICBmaWVsZExvZ0xldmVsLFxuICAgIHJldGVudGlvbixcbiAgfTtcbn07XG4iXX0=