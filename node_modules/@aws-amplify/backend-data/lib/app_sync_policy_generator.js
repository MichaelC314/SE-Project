import { Stack } from 'aws-cdk-lib';
import { Policy, PolicyStatement } from 'aws-cdk-lib/aws-iam';
/**
 * Generates policies for accessing an AppSync GraphQL API
 */
export class AppSyncPolicyGenerator {
    graphqlApi;
    modelIntrospectionSchemaArn;
    stack;
    policyPrefix = 'GraphqlAccessPolicy';
    policyCount = 1;
    /**
     * Initialize with the GraphqlAPI that the policies will be scoped to
     */
    constructor(graphqlApi, modelIntrospectionSchemaArn) {
        this.graphqlApi = graphqlApi;
        this.modelIntrospectionSchemaArn = modelIntrospectionSchemaArn;
        this.stack = Stack.of(graphqlApi);
    }
    /**
     * Generates a policy that grants GraphQL data-plane access to the provided actions
     *
     * The naming is a bit wonky here because the IAM action is always "appsync:GraphQL".
     * The input "action" maps to the "type" in the resource name part of the ARN which is "Query", "Mutation" or "Subscription"
     */
    generateGraphqlAccessPolicy(actions) {
        const resources = actions
            // convert from actions to GraphQL Type
            .map((action) => actionToTypeMap[action])
            // convert Type to resourceName
            .map((type) => [this.graphqlApi.arn, 'types', type, '*'].join('/'));
        const statements = [
            new PolicyStatement({
                actions: ['appsync:GraphQL'],
                resources,
            }),
        ];
        if (this.modelIntrospectionSchemaArn) {
            statements.push(new PolicyStatement({
                actions: ['s3:GetObject'],
                resources: [this.modelIntrospectionSchemaArn],
            }));
        }
        return new Policy(this.stack, `${this.policyPrefix}${this.policyCount++}`, {
            statements,
        });
    }
}
const actionToTypeMap = {
    query: 'Query',
    mutate: 'Mutation',
    listen: 'Subscription',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX3N5bmNfcG9saWN5X2dlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHBfc3luY19wb2xpY3lfZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFcEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUk5RDs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFRZDtJQUNBO0lBUkYsS0FBSyxDQUFRO0lBQ2IsWUFBWSxHQUFHLHFCQUFxQixDQUFDO0lBQzlDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDeEI7O09BRUc7SUFDSCxZQUNtQixVQUF1QixFQUN2QiwyQkFBb0M7UUFEcEMsZUFBVSxHQUFWLFVBQVUsQ0FBYTtRQUN2QixnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQVM7UUFFckQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNILDJCQUEyQixDQUFDLE9BQTJCO1FBQ3JELE1BQU0sU0FBUyxHQUFHLE9BQU87WUFDdkIsdUNBQXVDO2FBQ3RDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pDLCtCQUErQjthQUM5QixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV0RSxNQUFNLFVBQVUsR0FBRztZQUNqQixJQUFJLGVBQWUsQ0FBQztnQkFDbEIsT0FBTyxFQUFFLENBQUMsaUJBQWlCLENBQUM7Z0JBQzVCLFNBQVM7YUFDVixDQUFDO1NBQ0gsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLDJCQUEyQixFQUFFO1lBQ3BDLFVBQVUsQ0FBQyxJQUFJLENBQ2IsSUFBSSxlQUFlLENBQUM7Z0JBQ2xCLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztnQkFDekIsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDO2FBQzlDLENBQUMsQ0FDSCxDQUFDO1NBQ0g7UUFFRCxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO1lBQ3pFLFVBQVU7U0FDWCxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLGVBQWUsR0FBcUM7SUFDeEQsS0FBSyxFQUFFLE9BQU87SUFDZCxNQUFNLEVBQUUsVUFBVTtJQUNsQixNQUFNLEVBQUUsY0FBYztDQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJR3JhcGhxbEFwaSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcHBzeW5jJztcbmltcG9ydCB7IFBvbGljeSwgUG9saWN5U3RhdGVtZW50IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5cbmV4cG9ydCB0eXBlIEFwcFN5bmNBcGlBY3Rpb24gPSAncXVlcnknIHwgJ211dGF0ZScgfCAnbGlzdGVuJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgcG9saWNpZXMgZm9yIGFjY2Vzc2luZyBhbiBBcHBTeW5jIEdyYXBoUUwgQVBJXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBTeW5jUG9saWN5R2VuZXJhdG9yIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzdGFjazogU3RhY2s7XG4gIHByaXZhdGUgcmVhZG9ubHkgcG9saWN5UHJlZml4ID0gJ0dyYXBocWxBY2Nlc3NQb2xpY3knO1xuICBwcml2YXRlIHBvbGljeUNvdW50ID0gMTtcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgd2l0aCB0aGUgR3JhcGhxbEFQSSB0aGF0IHRoZSBwb2xpY2llcyB3aWxsIGJlIHNjb3BlZCB0b1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBncmFwaHFsQXBpOiBJR3JhcGhxbEFwaSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFybj86IHN0cmluZyxcbiAgKSB7XG4gICAgdGhpcy5zdGFjayA9IFN0YWNrLm9mKGdyYXBocWxBcGkpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBwb2xpY3kgdGhhdCBncmFudHMgR3JhcGhRTCBkYXRhLXBsYW5lIGFjY2VzcyB0byB0aGUgcHJvdmlkZWQgYWN0aW9uc1xuICAgKlxuICAgKiBUaGUgbmFtaW5nIGlzIGEgYml0IHdvbmt5IGhlcmUgYmVjYXVzZSB0aGUgSUFNIGFjdGlvbiBpcyBhbHdheXMgXCJhcHBzeW5jOkdyYXBoUUxcIi5cbiAgICogVGhlIGlucHV0IFwiYWN0aW9uXCIgbWFwcyB0byB0aGUgXCJ0eXBlXCIgaW4gdGhlIHJlc291cmNlIG5hbWUgcGFydCBvZiB0aGUgQVJOIHdoaWNoIGlzIFwiUXVlcnlcIiwgXCJNdXRhdGlvblwiIG9yIFwiU3Vic2NyaXB0aW9uXCJcbiAgICovXG4gIGdlbmVyYXRlR3JhcGhxbEFjY2Vzc1BvbGljeShhY3Rpb25zOiBBcHBTeW5jQXBpQWN0aW9uW10pIHtcbiAgICBjb25zdCByZXNvdXJjZXMgPSBhY3Rpb25zXG4gICAgICAvLyBjb252ZXJ0IGZyb20gYWN0aW9ucyB0byBHcmFwaFFMIFR5cGVcbiAgICAgIC5tYXAoKGFjdGlvbikgPT4gYWN0aW9uVG9UeXBlTWFwW2FjdGlvbl0pXG4gICAgICAvLyBjb252ZXJ0IFR5cGUgdG8gcmVzb3VyY2VOYW1lXG4gICAgICAubWFwKCh0eXBlKSA9PiBbdGhpcy5ncmFwaHFsQXBpLmFybiwgJ3R5cGVzJywgdHlwZSwgJyonXS5qb2luKCcvJykpO1xuXG4gICAgY29uc3Qgc3RhdGVtZW50cyA9IFtcbiAgICAgIG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICBhY3Rpb25zOiBbJ2FwcHN5bmM6R3JhcGhRTCddLFxuICAgICAgICByZXNvdXJjZXMsXG4gICAgICB9KSxcbiAgICBdO1xuXG4gICAgaWYgKHRoaXMubW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQXJuKSB7XG4gICAgICBzdGF0ZW1lbnRzLnB1c2goXG4gICAgICAgIG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgIGFjdGlvbnM6IFsnczM6R2V0T2JqZWN0J10sXG4gICAgICAgICAgcmVzb3VyY2VzOiBbdGhpcy5tb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBcm5dLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQb2xpY3kodGhpcy5zdGFjaywgYCR7dGhpcy5wb2xpY3lQcmVmaXh9JHt0aGlzLnBvbGljeUNvdW50Kyt9YCwge1xuICAgICAgc3RhdGVtZW50cyxcbiAgICB9KTtcbiAgfVxufVxuXG5jb25zdCBhY3Rpb25Ub1R5cGVNYXA6IFJlY29yZDxBcHBTeW5jQXBpQWN0aW9uLCBzdHJpbmc+ID0ge1xuICBxdWVyeTogJ1F1ZXJ5JyxcbiAgbXV0YXRlOiAnTXV0YXRpb24nLFxuICBsaXN0ZW46ICdTdWJzY3JpcHRpb24nLFxufTtcbiJdfQ==